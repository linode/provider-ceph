// Code generated by counterfeiter. DO NOT EDIT.
package backendstorefakes

import (
	"context"
	"sync"

	"github.com/aws/aws-sdk-go-v2/service/s3"
	"github.com/linode/provider-ceph/internal/backendstore"
)

type FakeS3Client struct {
	CreateBucketStub        func(context.Context, *s3.CreateBucketInput, ...func(*s3.Options)) (*s3.CreateBucketOutput, error)
	createBucketMutex       sync.RWMutex
	createBucketArgsForCall []struct {
		arg1 context.Context
		arg2 *s3.CreateBucketInput
		arg3 []func(*s3.Options)
	}
	createBucketReturns struct {
		result1 *s3.CreateBucketOutput
		result2 error
	}
	createBucketReturnsOnCall map[int]struct {
		result1 *s3.CreateBucketOutput
		result2 error
	}
	DeleteBucketStub        func(context.Context, *s3.DeleteBucketInput, ...func(*s3.Options)) (*s3.DeleteBucketOutput, error)
	deleteBucketMutex       sync.RWMutex
	deleteBucketArgsForCall []struct {
		arg1 context.Context
		arg2 *s3.DeleteBucketInput
		arg3 []func(*s3.Options)
	}
	deleteBucketReturns struct {
		result1 *s3.DeleteBucketOutput
		result2 error
	}
	deleteBucketReturnsOnCall map[int]struct {
		result1 *s3.DeleteBucketOutput
		result2 error
	}
	DeleteObjectStub        func(context.Context, *s3.DeleteObjectInput, ...func(*s3.Options)) (*s3.DeleteObjectOutput, error)
	deleteObjectMutex       sync.RWMutex
	deleteObjectArgsForCall []struct {
		arg1 context.Context
		arg2 *s3.DeleteObjectInput
		arg3 []func(*s3.Options)
	}
	deleteObjectReturns struct {
		result1 *s3.DeleteObjectOutput
		result2 error
	}
	deleteObjectReturnsOnCall map[int]struct {
		result1 *s3.DeleteObjectOutput
		result2 error
	}
	GetObjectStub        func(context.Context, *s3.GetObjectInput, ...func(*s3.Options)) (*s3.GetObjectOutput, error)
	getObjectMutex       sync.RWMutex
	getObjectArgsForCall []struct {
		arg1 context.Context
		arg2 *s3.GetObjectInput
		arg3 []func(*s3.Options)
	}
	getObjectReturns struct {
		result1 *s3.GetObjectOutput
		result2 error
	}
	getObjectReturnsOnCall map[int]struct {
		result1 *s3.GetObjectOutput
		result2 error
	}
	HeadBucketStub        func(context.Context, *s3.HeadBucketInput, ...func(*s3.Options)) (*s3.HeadBucketOutput, error)
	headBucketMutex       sync.RWMutex
	headBucketArgsForCall []struct {
		arg1 context.Context
		arg2 *s3.HeadBucketInput
		arg3 []func(*s3.Options)
	}
	headBucketReturns struct {
		result1 *s3.HeadBucketOutput
		result2 error
	}
	headBucketReturnsOnCall map[int]struct {
		result1 *s3.HeadBucketOutput
		result2 error
	}
	ListObjectVersionsStub        func(context.Context, *s3.ListObjectVersionsInput, ...func(*s3.Options)) (*s3.ListObjectVersionsOutput, error)
	listObjectVersionsMutex       sync.RWMutex
	listObjectVersionsArgsForCall []struct {
		arg1 context.Context
		arg2 *s3.ListObjectVersionsInput
		arg3 []func(*s3.Options)
	}
	listObjectVersionsReturns struct {
		result1 *s3.ListObjectVersionsOutput
		result2 error
	}
	listObjectVersionsReturnsOnCall map[int]struct {
		result1 *s3.ListObjectVersionsOutput
		result2 error
	}
	ListObjectsV2Stub        func(context.Context, *s3.ListObjectsV2Input, ...func(*s3.Options)) (*s3.ListObjectsV2Output, error)
	listObjectsV2Mutex       sync.RWMutex
	listObjectsV2ArgsForCall []struct {
		arg1 context.Context
		arg2 *s3.ListObjectsV2Input
		arg3 []func(*s3.Options)
	}
	listObjectsV2Returns struct {
		result1 *s3.ListObjectsV2Output
		result2 error
	}
	listObjectsV2ReturnsOnCall map[int]struct {
		result1 *s3.ListObjectsV2Output
		result2 error
	}
	PutBucketAclStub        func(context.Context, *s3.PutBucketAclInput, ...func(*s3.Options)) (*s3.PutBucketAclOutput, error)
	putBucketAclMutex       sync.RWMutex
	putBucketAclArgsForCall []struct {
		arg1 context.Context
		arg2 *s3.PutBucketAclInput
		arg3 []func(*s3.Options)
	}
	putBucketAclReturns struct {
		result1 *s3.PutBucketAclOutput
		result2 error
	}
	putBucketAclReturnsOnCall map[int]struct {
		result1 *s3.PutBucketAclOutput
		result2 error
	}
	PutObjectStub        func(context.Context, *s3.PutObjectInput, ...func(*s3.Options)) (*s3.PutObjectOutput, error)
	putObjectMutex       sync.RWMutex
	putObjectArgsForCall []struct {
		arg1 context.Context
		arg2 *s3.PutObjectInput
		arg3 []func(*s3.Options)
	}
	putObjectReturns struct {
		result1 *s3.PutObjectOutput
		result2 error
	}
	putObjectReturnsOnCall map[int]struct {
		result1 *s3.PutObjectOutput
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeS3Client) CreateBucket(arg1 context.Context, arg2 *s3.CreateBucketInput, arg3 ...func(*s3.Options)) (*s3.CreateBucketOutput, error) {
	fake.createBucketMutex.Lock()
	ret, specificReturn := fake.createBucketReturnsOnCall[len(fake.createBucketArgsForCall)]
	fake.createBucketArgsForCall = append(fake.createBucketArgsForCall, struct {
		arg1 context.Context
		arg2 *s3.CreateBucketInput
		arg3 []func(*s3.Options)
	}{arg1, arg2, arg3})
	stub := fake.CreateBucketStub
	fakeReturns := fake.createBucketReturns
	fake.recordInvocation("CreateBucket", []interface{}{arg1, arg2, arg3})
	fake.createBucketMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeS3Client) CreateBucketCallCount() int {
	fake.createBucketMutex.RLock()
	defer fake.createBucketMutex.RUnlock()
	return len(fake.createBucketArgsForCall)
}

func (fake *FakeS3Client) CreateBucketCalls(stub func(context.Context, *s3.CreateBucketInput, ...func(*s3.Options)) (*s3.CreateBucketOutput, error)) {
	fake.createBucketMutex.Lock()
	defer fake.createBucketMutex.Unlock()
	fake.CreateBucketStub = stub
}

func (fake *FakeS3Client) CreateBucketArgsForCall(i int) (context.Context, *s3.CreateBucketInput, []func(*s3.Options)) {
	fake.createBucketMutex.RLock()
	defer fake.createBucketMutex.RUnlock()
	argsForCall := fake.createBucketArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeS3Client) CreateBucketReturns(result1 *s3.CreateBucketOutput, result2 error) {
	fake.createBucketMutex.Lock()
	defer fake.createBucketMutex.Unlock()
	fake.CreateBucketStub = nil
	fake.createBucketReturns = struct {
		result1 *s3.CreateBucketOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeS3Client) CreateBucketReturnsOnCall(i int, result1 *s3.CreateBucketOutput, result2 error) {
	fake.createBucketMutex.Lock()
	defer fake.createBucketMutex.Unlock()
	fake.CreateBucketStub = nil
	if fake.createBucketReturnsOnCall == nil {
		fake.createBucketReturnsOnCall = make(map[int]struct {
			result1 *s3.CreateBucketOutput
			result2 error
		})
	}
	fake.createBucketReturnsOnCall[i] = struct {
		result1 *s3.CreateBucketOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeS3Client) DeleteBucket(arg1 context.Context, arg2 *s3.DeleteBucketInput, arg3 ...func(*s3.Options)) (*s3.DeleteBucketOutput, error) {
	fake.deleteBucketMutex.Lock()
	ret, specificReturn := fake.deleteBucketReturnsOnCall[len(fake.deleteBucketArgsForCall)]
	fake.deleteBucketArgsForCall = append(fake.deleteBucketArgsForCall, struct {
		arg1 context.Context
		arg2 *s3.DeleteBucketInput
		arg3 []func(*s3.Options)
	}{arg1, arg2, arg3})
	stub := fake.DeleteBucketStub
	fakeReturns := fake.deleteBucketReturns
	fake.recordInvocation("DeleteBucket", []interface{}{arg1, arg2, arg3})
	fake.deleteBucketMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeS3Client) DeleteBucketCallCount() int {
	fake.deleteBucketMutex.RLock()
	defer fake.deleteBucketMutex.RUnlock()
	return len(fake.deleteBucketArgsForCall)
}

func (fake *FakeS3Client) DeleteBucketCalls(stub func(context.Context, *s3.DeleteBucketInput, ...func(*s3.Options)) (*s3.DeleteBucketOutput, error)) {
	fake.deleteBucketMutex.Lock()
	defer fake.deleteBucketMutex.Unlock()
	fake.DeleteBucketStub = stub
}

func (fake *FakeS3Client) DeleteBucketArgsForCall(i int) (context.Context, *s3.DeleteBucketInput, []func(*s3.Options)) {
	fake.deleteBucketMutex.RLock()
	defer fake.deleteBucketMutex.RUnlock()
	argsForCall := fake.deleteBucketArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeS3Client) DeleteBucketReturns(result1 *s3.DeleteBucketOutput, result2 error) {
	fake.deleteBucketMutex.Lock()
	defer fake.deleteBucketMutex.Unlock()
	fake.DeleteBucketStub = nil
	fake.deleteBucketReturns = struct {
		result1 *s3.DeleteBucketOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeS3Client) DeleteBucketReturnsOnCall(i int, result1 *s3.DeleteBucketOutput, result2 error) {
	fake.deleteBucketMutex.Lock()
	defer fake.deleteBucketMutex.Unlock()
	fake.DeleteBucketStub = nil
	if fake.deleteBucketReturnsOnCall == nil {
		fake.deleteBucketReturnsOnCall = make(map[int]struct {
			result1 *s3.DeleteBucketOutput
			result2 error
		})
	}
	fake.deleteBucketReturnsOnCall[i] = struct {
		result1 *s3.DeleteBucketOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeS3Client) DeleteObject(arg1 context.Context, arg2 *s3.DeleteObjectInput, arg3 ...func(*s3.Options)) (*s3.DeleteObjectOutput, error) {
	fake.deleteObjectMutex.Lock()
	ret, specificReturn := fake.deleteObjectReturnsOnCall[len(fake.deleteObjectArgsForCall)]
	fake.deleteObjectArgsForCall = append(fake.deleteObjectArgsForCall, struct {
		arg1 context.Context
		arg2 *s3.DeleteObjectInput
		arg3 []func(*s3.Options)
	}{arg1, arg2, arg3})
	stub := fake.DeleteObjectStub
	fakeReturns := fake.deleteObjectReturns
	fake.recordInvocation("DeleteObject", []interface{}{arg1, arg2, arg3})
	fake.deleteObjectMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeS3Client) DeleteObjectCallCount() int {
	fake.deleteObjectMutex.RLock()
	defer fake.deleteObjectMutex.RUnlock()
	return len(fake.deleteObjectArgsForCall)
}

func (fake *FakeS3Client) DeleteObjectCalls(stub func(context.Context, *s3.DeleteObjectInput, ...func(*s3.Options)) (*s3.DeleteObjectOutput, error)) {
	fake.deleteObjectMutex.Lock()
	defer fake.deleteObjectMutex.Unlock()
	fake.DeleteObjectStub = stub
}

func (fake *FakeS3Client) DeleteObjectArgsForCall(i int) (context.Context, *s3.DeleteObjectInput, []func(*s3.Options)) {
	fake.deleteObjectMutex.RLock()
	defer fake.deleteObjectMutex.RUnlock()
	argsForCall := fake.deleteObjectArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeS3Client) DeleteObjectReturns(result1 *s3.DeleteObjectOutput, result2 error) {
	fake.deleteObjectMutex.Lock()
	defer fake.deleteObjectMutex.Unlock()
	fake.DeleteObjectStub = nil
	fake.deleteObjectReturns = struct {
		result1 *s3.DeleteObjectOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeS3Client) DeleteObjectReturnsOnCall(i int, result1 *s3.DeleteObjectOutput, result2 error) {
	fake.deleteObjectMutex.Lock()
	defer fake.deleteObjectMutex.Unlock()
	fake.DeleteObjectStub = nil
	if fake.deleteObjectReturnsOnCall == nil {
		fake.deleteObjectReturnsOnCall = make(map[int]struct {
			result1 *s3.DeleteObjectOutput
			result2 error
		})
	}
	fake.deleteObjectReturnsOnCall[i] = struct {
		result1 *s3.DeleteObjectOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeS3Client) GetObject(arg1 context.Context, arg2 *s3.GetObjectInput, arg3 ...func(*s3.Options)) (*s3.GetObjectOutput, error) {
	fake.getObjectMutex.Lock()
	ret, specificReturn := fake.getObjectReturnsOnCall[len(fake.getObjectArgsForCall)]
	fake.getObjectArgsForCall = append(fake.getObjectArgsForCall, struct {
		arg1 context.Context
		arg2 *s3.GetObjectInput
		arg3 []func(*s3.Options)
	}{arg1, arg2, arg3})
	stub := fake.GetObjectStub
	fakeReturns := fake.getObjectReturns
	fake.recordInvocation("GetObject", []interface{}{arg1, arg2, arg3})
	fake.getObjectMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeS3Client) GetObjectCallCount() int {
	fake.getObjectMutex.RLock()
	defer fake.getObjectMutex.RUnlock()
	return len(fake.getObjectArgsForCall)
}

func (fake *FakeS3Client) GetObjectCalls(stub func(context.Context, *s3.GetObjectInput, ...func(*s3.Options)) (*s3.GetObjectOutput, error)) {
	fake.getObjectMutex.Lock()
	defer fake.getObjectMutex.Unlock()
	fake.GetObjectStub = stub
}

func (fake *FakeS3Client) GetObjectArgsForCall(i int) (context.Context, *s3.GetObjectInput, []func(*s3.Options)) {
	fake.getObjectMutex.RLock()
	defer fake.getObjectMutex.RUnlock()
	argsForCall := fake.getObjectArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeS3Client) GetObjectReturns(result1 *s3.GetObjectOutput, result2 error) {
	fake.getObjectMutex.Lock()
	defer fake.getObjectMutex.Unlock()
	fake.GetObjectStub = nil
	fake.getObjectReturns = struct {
		result1 *s3.GetObjectOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeS3Client) GetObjectReturnsOnCall(i int, result1 *s3.GetObjectOutput, result2 error) {
	fake.getObjectMutex.Lock()
	defer fake.getObjectMutex.Unlock()
	fake.GetObjectStub = nil
	if fake.getObjectReturnsOnCall == nil {
		fake.getObjectReturnsOnCall = make(map[int]struct {
			result1 *s3.GetObjectOutput
			result2 error
		})
	}
	fake.getObjectReturnsOnCall[i] = struct {
		result1 *s3.GetObjectOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeS3Client) HeadBucket(arg1 context.Context, arg2 *s3.HeadBucketInput, arg3 ...func(*s3.Options)) (*s3.HeadBucketOutput, error) {
	fake.headBucketMutex.Lock()
	ret, specificReturn := fake.headBucketReturnsOnCall[len(fake.headBucketArgsForCall)]
	fake.headBucketArgsForCall = append(fake.headBucketArgsForCall, struct {
		arg1 context.Context
		arg2 *s3.HeadBucketInput
		arg3 []func(*s3.Options)
	}{arg1, arg2, arg3})
	stub := fake.HeadBucketStub
	fakeReturns := fake.headBucketReturns
	fake.recordInvocation("HeadBucket", []interface{}{arg1, arg2, arg3})
	fake.headBucketMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeS3Client) HeadBucketCallCount() int {
	fake.headBucketMutex.RLock()
	defer fake.headBucketMutex.RUnlock()
	return len(fake.headBucketArgsForCall)
}

func (fake *FakeS3Client) HeadBucketCalls(stub func(context.Context, *s3.HeadBucketInput, ...func(*s3.Options)) (*s3.HeadBucketOutput, error)) {
	fake.headBucketMutex.Lock()
	defer fake.headBucketMutex.Unlock()
	fake.HeadBucketStub = stub
}

func (fake *FakeS3Client) HeadBucketArgsForCall(i int) (context.Context, *s3.HeadBucketInput, []func(*s3.Options)) {
	fake.headBucketMutex.RLock()
	defer fake.headBucketMutex.RUnlock()
	argsForCall := fake.headBucketArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeS3Client) HeadBucketReturns(result1 *s3.HeadBucketOutput, result2 error) {
	fake.headBucketMutex.Lock()
	defer fake.headBucketMutex.Unlock()
	fake.HeadBucketStub = nil
	fake.headBucketReturns = struct {
		result1 *s3.HeadBucketOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeS3Client) HeadBucketReturnsOnCall(i int, result1 *s3.HeadBucketOutput, result2 error) {
	fake.headBucketMutex.Lock()
	defer fake.headBucketMutex.Unlock()
	fake.HeadBucketStub = nil
	if fake.headBucketReturnsOnCall == nil {
		fake.headBucketReturnsOnCall = make(map[int]struct {
			result1 *s3.HeadBucketOutput
			result2 error
		})
	}
	fake.headBucketReturnsOnCall[i] = struct {
		result1 *s3.HeadBucketOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeS3Client) ListObjectVersions(arg1 context.Context, arg2 *s3.ListObjectVersionsInput, arg3 ...func(*s3.Options)) (*s3.ListObjectVersionsOutput, error) {
	fake.listObjectVersionsMutex.Lock()
	ret, specificReturn := fake.listObjectVersionsReturnsOnCall[len(fake.listObjectVersionsArgsForCall)]
	fake.listObjectVersionsArgsForCall = append(fake.listObjectVersionsArgsForCall, struct {
		arg1 context.Context
		arg2 *s3.ListObjectVersionsInput
		arg3 []func(*s3.Options)
	}{arg1, arg2, arg3})
	stub := fake.ListObjectVersionsStub
	fakeReturns := fake.listObjectVersionsReturns
	fake.recordInvocation("ListObjectVersions", []interface{}{arg1, arg2, arg3})
	fake.listObjectVersionsMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeS3Client) ListObjectVersionsCallCount() int {
	fake.listObjectVersionsMutex.RLock()
	defer fake.listObjectVersionsMutex.RUnlock()
	return len(fake.listObjectVersionsArgsForCall)
}

func (fake *FakeS3Client) ListObjectVersionsCalls(stub func(context.Context, *s3.ListObjectVersionsInput, ...func(*s3.Options)) (*s3.ListObjectVersionsOutput, error)) {
	fake.listObjectVersionsMutex.Lock()
	defer fake.listObjectVersionsMutex.Unlock()
	fake.ListObjectVersionsStub = stub
}

func (fake *FakeS3Client) ListObjectVersionsArgsForCall(i int) (context.Context, *s3.ListObjectVersionsInput, []func(*s3.Options)) {
	fake.listObjectVersionsMutex.RLock()
	defer fake.listObjectVersionsMutex.RUnlock()
	argsForCall := fake.listObjectVersionsArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeS3Client) ListObjectVersionsReturns(result1 *s3.ListObjectVersionsOutput, result2 error) {
	fake.listObjectVersionsMutex.Lock()
	defer fake.listObjectVersionsMutex.Unlock()
	fake.ListObjectVersionsStub = nil
	fake.listObjectVersionsReturns = struct {
		result1 *s3.ListObjectVersionsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeS3Client) ListObjectVersionsReturnsOnCall(i int, result1 *s3.ListObjectVersionsOutput, result2 error) {
	fake.listObjectVersionsMutex.Lock()
	defer fake.listObjectVersionsMutex.Unlock()
	fake.ListObjectVersionsStub = nil
	if fake.listObjectVersionsReturnsOnCall == nil {
		fake.listObjectVersionsReturnsOnCall = make(map[int]struct {
			result1 *s3.ListObjectVersionsOutput
			result2 error
		})
	}
	fake.listObjectVersionsReturnsOnCall[i] = struct {
		result1 *s3.ListObjectVersionsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeS3Client) ListObjectsV2(arg1 context.Context, arg2 *s3.ListObjectsV2Input, arg3 ...func(*s3.Options)) (*s3.ListObjectsV2Output, error) {
	fake.listObjectsV2Mutex.Lock()
	ret, specificReturn := fake.listObjectsV2ReturnsOnCall[len(fake.listObjectsV2ArgsForCall)]
	fake.listObjectsV2ArgsForCall = append(fake.listObjectsV2ArgsForCall, struct {
		arg1 context.Context
		arg2 *s3.ListObjectsV2Input
		arg3 []func(*s3.Options)
	}{arg1, arg2, arg3})
	stub := fake.ListObjectsV2Stub
	fakeReturns := fake.listObjectsV2Returns
	fake.recordInvocation("ListObjectsV2", []interface{}{arg1, arg2, arg3})
	fake.listObjectsV2Mutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeS3Client) ListObjectsV2CallCount() int {
	fake.listObjectsV2Mutex.RLock()
	defer fake.listObjectsV2Mutex.RUnlock()
	return len(fake.listObjectsV2ArgsForCall)
}

func (fake *FakeS3Client) ListObjectsV2Calls(stub func(context.Context, *s3.ListObjectsV2Input, ...func(*s3.Options)) (*s3.ListObjectsV2Output, error)) {
	fake.listObjectsV2Mutex.Lock()
	defer fake.listObjectsV2Mutex.Unlock()
	fake.ListObjectsV2Stub = stub
}

func (fake *FakeS3Client) ListObjectsV2ArgsForCall(i int) (context.Context, *s3.ListObjectsV2Input, []func(*s3.Options)) {
	fake.listObjectsV2Mutex.RLock()
	defer fake.listObjectsV2Mutex.RUnlock()
	argsForCall := fake.listObjectsV2ArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeS3Client) ListObjectsV2Returns(result1 *s3.ListObjectsV2Output, result2 error) {
	fake.listObjectsV2Mutex.Lock()
	defer fake.listObjectsV2Mutex.Unlock()
	fake.ListObjectsV2Stub = nil
	fake.listObjectsV2Returns = struct {
		result1 *s3.ListObjectsV2Output
		result2 error
	}{result1, result2}
}

func (fake *FakeS3Client) ListObjectsV2ReturnsOnCall(i int, result1 *s3.ListObjectsV2Output, result2 error) {
	fake.listObjectsV2Mutex.Lock()
	defer fake.listObjectsV2Mutex.Unlock()
	fake.ListObjectsV2Stub = nil
	if fake.listObjectsV2ReturnsOnCall == nil {
		fake.listObjectsV2ReturnsOnCall = make(map[int]struct {
			result1 *s3.ListObjectsV2Output
			result2 error
		})
	}
	fake.listObjectsV2ReturnsOnCall[i] = struct {
		result1 *s3.ListObjectsV2Output
		result2 error
	}{result1, result2}
}

func (fake *FakeS3Client) PutBucketAcl(arg1 context.Context, arg2 *s3.PutBucketAclInput, arg3 ...func(*s3.Options)) (*s3.PutBucketAclOutput, error) {
	fake.putBucketAclMutex.Lock()
	ret, specificReturn := fake.putBucketAclReturnsOnCall[len(fake.putBucketAclArgsForCall)]
	fake.putBucketAclArgsForCall = append(fake.putBucketAclArgsForCall, struct {
		arg1 context.Context
		arg2 *s3.PutBucketAclInput
		arg3 []func(*s3.Options)
	}{arg1, arg2, arg3})
	stub := fake.PutBucketAclStub
	fakeReturns := fake.putBucketAclReturns
	fake.recordInvocation("PutBucketAcl", []interface{}{arg1, arg2, arg3})
	fake.putBucketAclMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeS3Client) PutBucketAclCallCount() int {
	fake.putBucketAclMutex.RLock()
	defer fake.putBucketAclMutex.RUnlock()
	return len(fake.putBucketAclArgsForCall)
}

func (fake *FakeS3Client) PutBucketAclCalls(stub func(context.Context, *s3.PutBucketAclInput, ...func(*s3.Options)) (*s3.PutBucketAclOutput, error)) {
	fake.putBucketAclMutex.Lock()
	defer fake.putBucketAclMutex.Unlock()
	fake.PutBucketAclStub = stub
}

func (fake *FakeS3Client) PutBucketAclArgsForCall(i int) (context.Context, *s3.PutBucketAclInput, []func(*s3.Options)) {
	fake.putBucketAclMutex.RLock()
	defer fake.putBucketAclMutex.RUnlock()
	argsForCall := fake.putBucketAclArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeS3Client) PutBucketAclReturns(result1 *s3.PutBucketAclOutput, result2 error) {
	fake.putBucketAclMutex.Lock()
	defer fake.putBucketAclMutex.Unlock()
	fake.PutBucketAclStub = nil
	fake.putBucketAclReturns = struct {
		result1 *s3.PutBucketAclOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeS3Client) PutBucketAclReturnsOnCall(i int, result1 *s3.PutBucketAclOutput, result2 error) {
	fake.putBucketAclMutex.Lock()
	defer fake.putBucketAclMutex.Unlock()
	fake.PutBucketAclStub = nil
	if fake.putBucketAclReturnsOnCall == nil {
		fake.putBucketAclReturnsOnCall = make(map[int]struct {
			result1 *s3.PutBucketAclOutput
			result2 error
		})
	}
	fake.putBucketAclReturnsOnCall[i] = struct {
		result1 *s3.PutBucketAclOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeS3Client) PutObject(arg1 context.Context, arg2 *s3.PutObjectInput, arg3 ...func(*s3.Options)) (*s3.PutObjectOutput, error) {
	fake.putObjectMutex.Lock()
	ret, specificReturn := fake.putObjectReturnsOnCall[len(fake.putObjectArgsForCall)]
	fake.putObjectArgsForCall = append(fake.putObjectArgsForCall, struct {
		arg1 context.Context
		arg2 *s3.PutObjectInput
		arg3 []func(*s3.Options)
	}{arg1, arg2, arg3})
	stub := fake.PutObjectStub
	fakeReturns := fake.putObjectReturns
	fake.recordInvocation("PutObject", []interface{}{arg1, arg2, arg3})
	fake.putObjectMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeS3Client) PutObjectCallCount() int {
	fake.putObjectMutex.RLock()
	defer fake.putObjectMutex.RUnlock()
	return len(fake.putObjectArgsForCall)
}

func (fake *FakeS3Client) PutObjectCalls(stub func(context.Context, *s3.PutObjectInput, ...func(*s3.Options)) (*s3.PutObjectOutput, error)) {
	fake.putObjectMutex.Lock()
	defer fake.putObjectMutex.Unlock()
	fake.PutObjectStub = stub
}

func (fake *FakeS3Client) PutObjectArgsForCall(i int) (context.Context, *s3.PutObjectInput, []func(*s3.Options)) {
	fake.putObjectMutex.RLock()
	defer fake.putObjectMutex.RUnlock()
	argsForCall := fake.putObjectArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeS3Client) PutObjectReturns(result1 *s3.PutObjectOutput, result2 error) {
	fake.putObjectMutex.Lock()
	defer fake.putObjectMutex.Unlock()
	fake.PutObjectStub = nil
	fake.putObjectReturns = struct {
		result1 *s3.PutObjectOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeS3Client) PutObjectReturnsOnCall(i int, result1 *s3.PutObjectOutput, result2 error) {
	fake.putObjectMutex.Lock()
	defer fake.putObjectMutex.Unlock()
	fake.PutObjectStub = nil
	if fake.putObjectReturnsOnCall == nil {
		fake.putObjectReturnsOnCall = make(map[int]struct {
			result1 *s3.PutObjectOutput
			result2 error
		})
	}
	fake.putObjectReturnsOnCall[i] = struct {
		result1 *s3.PutObjectOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeS3Client) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.createBucketMutex.RLock()
	defer fake.createBucketMutex.RUnlock()
	fake.deleteBucketMutex.RLock()
	defer fake.deleteBucketMutex.RUnlock()
	fake.deleteObjectMutex.RLock()
	defer fake.deleteObjectMutex.RUnlock()
	fake.getObjectMutex.RLock()
	defer fake.getObjectMutex.RUnlock()
	fake.headBucketMutex.RLock()
	defer fake.headBucketMutex.RUnlock()
	fake.listObjectVersionsMutex.RLock()
	defer fake.listObjectVersionsMutex.RUnlock()
	fake.listObjectsV2Mutex.RLock()
	defer fake.listObjectsV2Mutex.RUnlock()
	fake.putBucketAclMutex.RLock()
	defer fake.putBucketAclMutex.RUnlock()
	fake.putObjectMutex.RLock()
	defer fake.putObjectMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeS3Client) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ backendstore.S3Client = new(FakeS3Client)
