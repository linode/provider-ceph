// Code generated by counterfeiter. DO NOT EDIT.
package backendstorefakes

import (
	"context"
	"sync"

	"github.com/aws/aws-sdk-go-v2/service/s3"
	"github.com/linode/provider-ceph/internal/backendstore"
)

type FakeS3Client struct {
	CreateBucketStub        func(context.Context, *s3.CreateBucketInput, ...func(*s3.Options)) (*s3.CreateBucketOutput, error)
	createBucketMutex       sync.RWMutex
	createBucketArgsForCall []struct {
		arg1 context.Context
		arg2 *s3.CreateBucketInput
		arg3 []func(*s3.Options)
	}
	createBucketReturns struct {
		result1 *s3.CreateBucketOutput
		result2 error
	}
	createBucketReturnsOnCall map[int]struct {
		result1 *s3.CreateBucketOutput
		result2 error
	}
	DeleteBucketStub        func(context.Context, *s3.DeleteBucketInput, ...func(*s3.Options)) (*s3.DeleteBucketOutput, error)
	deleteBucketMutex       sync.RWMutex
	deleteBucketArgsForCall []struct {
		arg1 context.Context
		arg2 *s3.DeleteBucketInput
		arg3 []func(*s3.Options)
	}
	deleteBucketReturns struct {
		result1 *s3.DeleteBucketOutput
		result2 error
	}
	deleteBucketReturnsOnCall map[int]struct {
		result1 *s3.DeleteBucketOutput
		result2 error
	}
	DeleteBucketLifecycleStub        func(context.Context, *s3.DeleteBucketLifecycleInput, ...func(*s3.Options)) (*s3.DeleteBucketLifecycleOutput, error)
	deleteBucketLifecycleMutex       sync.RWMutex
	deleteBucketLifecycleArgsForCall []struct {
		arg1 context.Context
		arg2 *s3.DeleteBucketLifecycleInput
		arg3 []func(*s3.Options)
	}
	deleteBucketLifecycleReturns struct {
		result1 *s3.DeleteBucketLifecycleOutput
		result2 error
	}
	deleteBucketLifecycleReturnsOnCall map[int]struct {
		result1 *s3.DeleteBucketLifecycleOutput
		result2 error
	}
	DeleteBucketPolicyStub        func(context.Context, *s3.DeleteBucketPolicyInput, ...func(*s3.Options)) (*s3.DeleteBucketPolicyOutput, error)
	deleteBucketPolicyMutex       sync.RWMutex
	deleteBucketPolicyArgsForCall []struct {
		arg1 context.Context
		arg2 *s3.DeleteBucketPolicyInput
		arg3 []func(*s3.Options)
	}
	deleteBucketPolicyReturns struct {
		result1 *s3.DeleteBucketPolicyOutput
		result2 error
	}
	deleteBucketPolicyReturnsOnCall map[int]struct {
		result1 *s3.DeleteBucketPolicyOutput
		result2 error
	}
	DeleteObjectStub        func(context.Context, *s3.DeleteObjectInput, ...func(*s3.Options)) (*s3.DeleteObjectOutput, error)
	deleteObjectMutex       sync.RWMutex
	deleteObjectArgsForCall []struct {
		arg1 context.Context
		arg2 *s3.DeleteObjectInput
		arg3 []func(*s3.Options)
	}
	deleteObjectReturns struct {
		result1 *s3.DeleteObjectOutput
		result2 error
	}
	deleteObjectReturnsOnCall map[int]struct {
		result1 *s3.DeleteObjectOutput
		result2 error
	}
	GetBucketAclStub        func(context.Context, *s3.GetBucketAclInput, ...func(*s3.Options)) (*s3.GetBucketAclOutput, error)
	getBucketAclMutex       sync.RWMutex
	getBucketAclArgsForCall []struct {
		arg1 context.Context
		arg2 *s3.GetBucketAclInput
		arg3 []func(*s3.Options)
	}
	getBucketAclReturns struct {
		result1 *s3.GetBucketAclOutput
		result2 error
	}
	getBucketAclReturnsOnCall map[int]struct {
		result1 *s3.GetBucketAclOutput
		result2 error
	}
	GetBucketLifecycleConfigurationStub        func(context.Context, *s3.GetBucketLifecycleConfigurationInput, ...func(*s3.Options)) (*s3.GetBucketLifecycleConfigurationOutput, error)
	getBucketLifecycleConfigurationMutex       sync.RWMutex
	getBucketLifecycleConfigurationArgsForCall []struct {
		arg1 context.Context
		arg2 *s3.GetBucketLifecycleConfigurationInput
		arg3 []func(*s3.Options)
	}
	getBucketLifecycleConfigurationReturns struct {
		result1 *s3.GetBucketLifecycleConfigurationOutput
		result2 error
	}
	getBucketLifecycleConfigurationReturnsOnCall map[int]struct {
		result1 *s3.GetBucketLifecycleConfigurationOutput
		result2 error
	}
	GetBucketPolicyStub        func(context.Context, *s3.GetBucketPolicyInput, ...func(*s3.Options)) (*s3.GetBucketPolicyOutput, error)
	getBucketPolicyMutex       sync.RWMutex
	getBucketPolicyArgsForCall []struct {
		arg1 context.Context
		arg2 *s3.GetBucketPolicyInput
		arg3 []func(*s3.Options)
	}
	getBucketPolicyReturns struct {
		result1 *s3.GetBucketPolicyOutput
		result2 error
	}
	getBucketPolicyReturnsOnCall map[int]struct {
		result1 *s3.GetBucketPolicyOutput
		result2 error
	}
	GetBucketVersioningStub        func(context.Context, *s3.GetBucketVersioningInput, ...func(*s3.Options)) (*s3.GetBucketVersioningOutput, error)
	getBucketVersioningMutex       sync.RWMutex
	getBucketVersioningArgsForCall []struct {
		arg1 context.Context
		arg2 *s3.GetBucketVersioningInput
		arg3 []func(*s3.Options)
	}
	getBucketVersioningReturns struct {
		result1 *s3.GetBucketVersioningOutput
		result2 error
	}
	getBucketVersioningReturnsOnCall map[int]struct {
		result1 *s3.GetBucketVersioningOutput
		result2 error
	}
	GetObjectStub        func(context.Context, *s3.GetObjectInput, ...func(*s3.Options)) (*s3.GetObjectOutput, error)
	getObjectMutex       sync.RWMutex
	getObjectArgsForCall []struct {
		arg1 context.Context
		arg2 *s3.GetObjectInput
		arg3 []func(*s3.Options)
	}
	getObjectReturns struct {
		result1 *s3.GetObjectOutput
		result2 error
	}
	getObjectReturnsOnCall map[int]struct {
		result1 *s3.GetObjectOutput
		result2 error
	}
	GetObjectLockConfigurationStub        func(context.Context, *s3.GetObjectLockConfigurationInput, ...func(*s3.Options)) (*s3.GetObjectLockConfigurationOutput, error)
	getObjectLockConfigurationMutex       sync.RWMutex
	getObjectLockConfigurationArgsForCall []struct {
		arg1 context.Context
		arg2 *s3.GetObjectLockConfigurationInput
		arg3 []func(*s3.Options)
	}
	getObjectLockConfigurationReturns struct {
		result1 *s3.GetObjectLockConfigurationOutput
		result2 error
	}
	getObjectLockConfigurationReturnsOnCall map[int]struct {
		result1 *s3.GetObjectLockConfigurationOutput
		result2 error
	}
	HeadBucketStub        func(context.Context, *s3.HeadBucketInput, ...func(*s3.Options)) (*s3.HeadBucketOutput, error)
	headBucketMutex       sync.RWMutex
	headBucketArgsForCall []struct {
		arg1 context.Context
		arg2 *s3.HeadBucketInput
		arg3 []func(*s3.Options)
	}
	headBucketReturns struct {
		result1 *s3.HeadBucketOutput
		result2 error
	}
	headBucketReturnsOnCall map[int]struct {
		result1 *s3.HeadBucketOutput
		result2 error
	}
	ListObjectVersionsStub        func(context.Context, *s3.ListObjectVersionsInput, ...func(*s3.Options)) (*s3.ListObjectVersionsOutput, error)
	listObjectVersionsMutex       sync.RWMutex
	listObjectVersionsArgsForCall []struct {
		arg1 context.Context
		arg2 *s3.ListObjectVersionsInput
		arg3 []func(*s3.Options)
	}
	listObjectVersionsReturns struct {
		result1 *s3.ListObjectVersionsOutput
		result2 error
	}
	listObjectVersionsReturnsOnCall map[int]struct {
		result1 *s3.ListObjectVersionsOutput
		result2 error
	}
	ListObjectsV2Stub        func(context.Context, *s3.ListObjectsV2Input, ...func(*s3.Options)) (*s3.ListObjectsV2Output, error)
	listObjectsV2Mutex       sync.RWMutex
	listObjectsV2ArgsForCall []struct {
		arg1 context.Context
		arg2 *s3.ListObjectsV2Input
		arg3 []func(*s3.Options)
	}
	listObjectsV2Returns struct {
		result1 *s3.ListObjectsV2Output
		result2 error
	}
	listObjectsV2ReturnsOnCall map[int]struct {
		result1 *s3.ListObjectsV2Output
		result2 error
	}
	PutBucketAclStub        func(context.Context, *s3.PutBucketAclInput, ...func(*s3.Options)) (*s3.PutBucketAclOutput, error)
	putBucketAclMutex       sync.RWMutex
	putBucketAclArgsForCall []struct {
		arg1 context.Context
		arg2 *s3.PutBucketAclInput
		arg3 []func(*s3.Options)
	}
	putBucketAclReturns struct {
		result1 *s3.PutBucketAclOutput
		result2 error
	}
	putBucketAclReturnsOnCall map[int]struct {
		result1 *s3.PutBucketAclOutput
		result2 error
	}
	PutBucketLifecycleConfigurationStub        func(context.Context, *s3.PutBucketLifecycleConfigurationInput, ...func(*s3.Options)) (*s3.PutBucketLifecycleConfigurationOutput, error)
	putBucketLifecycleConfigurationMutex       sync.RWMutex
	putBucketLifecycleConfigurationArgsForCall []struct {
		arg1 context.Context
		arg2 *s3.PutBucketLifecycleConfigurationInput
		arg3 []func(*s3.Options)
	}
	putBucketLifecycleConfigurationReturns struct {
		result1 *s3.PutBucketLifecycleConfigurationOutput
		result2 error
	}
	putBucketLifecycleConfigurationReturnsOnCall map[int]struct {
		result1 *s3.PutBucketLifecycleConfigurationOutput
		result2 error
	}
	PutBucketPolicyStub        func(context.Context, *s3.PutBucketPolicyInput, ...func(*s3.Options)) (*s3.PutBucketPolicyOutput, error)
	putBucketPolicyMutex       sync.RWMutex
	putBucketPolicyArgsForCall []struct {
		arg1 context.Context
		arg2 *s3.PutBucketPolicyInput
		arg3 []func(*s3.Options)
	}
	putBucketPolicyReturns struct {
		result1 *s3.PutBucketPolicyOutput
		result2 error
	}
	putBucketPolicyReturnsOnCall map[int]struct {
		result1 *s3.PutBucketPolicyOutput
		result2 error
	}
	PutBucketVersioningStub        func(context.Context, *s3.PutBucketVersioningInput, ...func(*s3.Options)) (*s3.PutBucketVersioningOutput, error)
	putBucketVersioningMutex       sync.RWMutex
	putBucketVersioningArgsForCall []struct {
		arg1 context.Context
		arg2 *s3.PutBucketVersioningInput
		arg3 []func(*s3.Options)
	}
	putBucketVersioningReturns struct {
		result1 *s3.PutBucketVersioningOutput
		result2 error
	}
	putBucketVersioningReturnsOnCall map[int]struct {
		result1 *s3.PutBucketVersioningOutput
		result2 error
	}
	PutObjectStub        func(context.Context, *s3.PutObjectInput, ...func(*s3.Options)) (*s3.PutObjectOutput, error)
	putObjectMutex       sync.RWMutex
	putObjectArgsForCall []struct {
		arg1 context.Context
		arg2 *s3.PutObjectInput
		arg3 []func(*s3.Options)
	}
	putObjectReturns struct {
		result1 *s3.PutObjectOutput
		result2 error
	}
	putObjectReturnsOnCall map[int]struct {
		result1 *s3.PutObjectOutput
		result2 error
	}
	PutObjectLockConfigurationStub        func(context.Context, *s3.PutObjectLockConfigurationInput, ...func(*s3.Options)) (*s3.PutObjectLockConfigurationOutput, error)
	putObjectLockConfigurationMutex       sync.RWMutex
	putObjectLockConfigurationArgsForCall []struct {
		arg1 context.Context
		arg2 *s3.PutObjectLockConfigurationInput
		arg3 []func(*s3.Options)
	}
	putObjectLockConfigurationReturns struct {
		result1 *s3.PutObjectLockConfigurationOutput
		result2 error
	}
	putObjectLockConfigurationReturnsOnCall map[int]struct {
		result1 *s3.PutObjectLockConfigurationOutput
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeS3Client) CreateBucket(arg1 context.Context, arg2 *s3.CreateBucketInput, arg3 ...func(*s3.Options)) (*s3.CreateBucketOutput, error) {
	fake.createBucketMutex.Lock()
	ret, specificReturn := fake.createBucketReturnsOnCall[len(fake.createBucketArgsForCall)]
	fake.createBucketArgsForCall = append(fake.createBucketArgsForCall, struct {
		arg1 context.Context
		arg2 *s3.CreateBucketInput
		arg3 []func(*s3.Options)
	}{arg1, arg2, arg3})
	stub := fake.CreateBucketStub
	fakeReturns := fake.createBucketReturns
	fake.recordInvocation("CreateBucket", []interface{}{arg1, arg2, arg3})
	fake.createBucketMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeS3Client) CreateBucketCallCount() int {
	fake.createBucketMutex.RLock()
	defer fake.createBucketMutex.RUnlock()
	return len(fake.createBucketArgsForCall)
}

func (fake *FakeS3Client) CreateBucketCalls(stub func(context.Context, *s3.CreateBucketInput, ...func(*s3.Options)) (*s3.CreateBucketOutput, error)) {
	fake.createBucketMutex.Lock()
	defer fake.createBucketMutex.Unlock()
	fake.CreateBucketStub = stub
}

func (fake *FakeS3Client) CreateBucketArgsForCall(i int) (context.Context, *s3.CreateBucketInput, []func(*s3.Options)) {
	fake.createBucketMutex.RLock()
	defer fake.createBucketMutex.RUnlock()
	argsForCall := fake.createBucketArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeS3Client) CreateBucketReturns(result1 *s3.CreateBucketOutput, result2 error) {
	fake.createBucketMutex.Lock()
	defer fake.createBucketMutex.Unlock()
	fake.CreateBucketStub = nil
	fake.createBucketReturns = struct {
		result1 *s3.CreateBucketOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeS3Client) CreateBucketReturnsOnCall(i int, result1 *s3.CreateBucketOutput, result2 error) {
	fake.createBucketMutex.Lock()
	defer fake.createBucketMutex.Unlock()
	fake.CreateBucketStub = nil
	if fake.createBucketReturnsOnCall == nil {
		fake.createBucketReturnsOnCall = make(map[int]struct {
			result1 *s3.CreateBucketOutput
			result2 error
		})
	}
	fake.createBucketReturnsOnCall[i] = struct {
		result1 *s3.CreateBucketOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeS3Client) DeleteBucket(arg1 context.Context, arg2 *s3.DeleteBucketInput, arg3 ...func(*s3.Options)) (*s3.DeleteBucketOutput, error) {
	fake.deleteBucketMutex.Lock()
	ret, specificReturn := fake.deleteBucketReturnsOnCall[len(fake.deleteBucketArgsForCall)]
	fake.deleteBucketArgsForCall = append(fake.deleteBucketArgsForCall, struct {
		arg1 context.Context
		arg2 *s3.DeleteBucketInput
		arg3 []func(*s3.Options)
	}{arg1, arg2, arg3})
	stub := fake.DeleteBucketStub
	fakeReturns := fake.deleteBucketReturns
	fake.recordInvocation("DeleteBucket", []interface{}{arg1, arg2, arg3})
	fake.deleteBucketMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeS3Client) DeleteBucketCallCount() int {
	fake.deleteBucketMutex.RLock()
	defer fake.deleteBucketMutex.RUnlock()
	return len(fake.deleteBucketArgsForCall)
}

func (fake *FakeS3Client) DeleteBucketCalls(stub func(context.Context, *s3.DeleteBucketInput, ...func(*s3.Options)) (*s3.DeleteBucketOutput, error)) {
	fake.deleteBucketMutex.Lock()
	defer fake.deleteBucketMutex.Unlock()
	fake.DeleteBucketStub = stub
}

func (fake *FakeS3Client) DeleteBucketArgsForCall(i int) (context.Context, *s3.DeleteBucketInput, []func(*s3.Options)) {
	fake.deleteBucketMutex.RLock()
	defer fake.deleteBucketMutex.RUnlock()
	argsForCall := fake.deleteBucketArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeS3Client) DeleteBucketReturns(result1 *s3.DeleteBucketOutput, result2 error) {
	fake.deleteBucketMutex.Lock()
	defer fake.deleteBucketMutex.Unlock()
	fake.DeleteBucketStub = nil
	fake.deleteBucketReturns = struct {
		result1 *s3.DeleteBucketOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeS3Client) DeleteBucketReturnsOnCall(i int, result1 *s3.DeleteBucketOutput, result2 error) {
	fake.deleteBucketMutex.Lock()
	defer fake.deleteBucketMutex.Unlock()
	fake.DeleteBucketStub = nil
	if fake.deleteBucketReturnsOnCall == nil {
		fake.deleteBucketReturnsOnCall = make(map[int]struct {
			result1 *s3.DeleteBucketOutput
			result2 error
		})
	}
	fake.deleteBucketReturnsOnCall[i] = struct {
		result1 *s3.DeleteBucketOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeS3Client) DeleteBucketLifecycle(arg1 context.Context, arg2 *s3.DeleteBucketLifecycleInput, arg3 ...func(*s3.Options)) (*s3.DeleteBucketLifecycleOutput, error) {
	fake.deleteBucketLifecycleMutex.Lock()
	ret, specificReturn := fake.deleteBucketLifecycleReturnsOnCall[len(fake.deleteBucketLifecycleArgsForCall)]
	fake.deleteBucketLifecycleArgsForCall = append(fake.deleteBucketLifecycleArgsForCall, struct {
		arg1 context.Context
		arg2 *s3.DeleteBucketLifecycleInput
		arg3 []func(*s3.Options)
	}{arg1, arg2, arg3})
	stub := fake.DeleteBucketLifecycleStub
	fakeReturns := fake.deleteBucketLifecycleReturns
	fake.recordInvocation("DeleteBucketLifecycle", []interface{}{arg1, arg2, arg3})
	fake.deleteBucketLifecycleMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeS3Client) DeleteBucketLifecycleCallCount() int {
	fake.deleteBucketLifecycleMutex.RLock()
	defer fake.deleteBucketLifecycleMutex.RUnlock()
	return len(fake.deleteBucketLifecycleArgsForCall)
}

func (fake *FakeS3Client) DeleteBucketLifecycleCalls(stub func(context.Context, *s3.DeleteBucketLifecycleInput, ...func(*s3.Options)) (*s3.DeleteBucketLifecycleOutput, error)) {
	fake.deleteBucketLifecycleMutex.Lock()
	defer fake.deleteBucketLifecycleMutex.Unlock()
	fake.DeleteBucketLifecycleStub = stub
}

func (fake *FakeS3Client) DeleteBucketLifecycleArgsForCall(i int) (context.Context, *s3.DeleteBucketLifecycleInput, []func(*s3.Options)) {
	fake.deleteBucketLifecycleMutex.RLock()
	defer fake.deleteBucketLifecycleMutex.RUnlock()
	argsForCall := fake.deleteBucketLifecycleArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeS3Client) DeleteBucketLifecycleReturns(result1 *s3.DeleteBucketLifecycleOutput, result2 error) {
	fake.deleteBucketLifecycleMutex.Lock()
	defer fake.deleteBucketLifecycleMutex.Unlock()
	fake.DeleteBucketLifecycleStub = nil
	fake.deleteBucketLifecycleReturns = struct {
		result1 *s3.DeleteBucketLifecycleOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeS3Client) DeleteBucketLifecycleReturnsOnCall(i int, result1 *s3.DeleteBucketLifecycleOutput, result2 error) {
	fake.deleteBucketLifecycleMutex.Lock()
	defer fake.deleteBucketLifecycleMutex.Unlock()
	fake.DeleteBucketLifecycleStub = nil
	if fake.deleteBucketLifecycleReturnsOnCall == nil {
		fake.deleteBucketLifecycleReturnsOnCall = make(map[int]struct {
			result1 *s3.DeleteBucketLifecycleOutput
			result2 error
		})
	}
	fake.deleteBucketLifecycleReturnsOnCall[i] = struct {
		result1 *s3.DeleteBucketLifecycleOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeS3Client) DeleteBucketPolicy(arg1 context.Context, arg2 *s3.DeleteBucketPolicyInput, arg3 ...func(*s3.Options)) (*s3.DeleteBucketPolicyOutput, error) {
	fake.deleteBucketPolicyMutex.Lock()
	ret, specificReturn := fake.deleteBucketPolicyReturnsOnCall[len(fake.deleteBucketPolicyArgsForCall)]
	fake.deleteBucketPolicyArgsForCall = append(fake.deleteBucketPolicyArgsForCall, struct {
		arg1 context.Context
		arg2 *s3.DeleteBucketPolicyInput
		arg3 []func(*s3.Options)
	}{arg1, arg2, arg3})
	stub := fake.DeleteBucketPolicyStub
	fakeReturns := fake.deleteBucketPolicyReturns
	fake.recordInvocation("DeleteBucketPolicy", []interface{}{arg1, arg2, arg3})
	fake.deleteBucketPolicyMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeS3Client) DeleteBucketPolicyCallCount() int {
	fake.deleteBucketPolicyMutex.RLock()
	defer fake.deleteBucketPolicyMutex.RUnlock()
	return len(fake.deleteBucketPolicyArgsForCall)
}

func (fake *FakeS3Client) DeleteBucketPolicyCalls(stub func(context.Context, *s3.DeleteBucketPolicyInput, ...func(*s3.Options)) (*s3.DeleteBucketPolicyOutput, error)) {
	fake.deleteBucketPolicyMutex.Lock()
	defer fake.deleteBucketPolicyMutex.Unlock()
	fake.DeleteBucketPolicyStub = stub
}

func (fake *FakeS3Client) DeleteBucketPolicyArgsForCall(i int) (context.Context, *s3.DeleteBucketPolicyInput, []func(*s3.Options)) {
	fake.deleteBucketPolicyMutex.RLock()
	defer fake.deleteBucketPolicyMutex.RUnlock()
	argsForCall := fake.deleteBucketPolicyArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeS3Client) DeleteBucketPolicyReturns(result1 *s3.DeleteBucketPolicyOutput, result2 error) {
	fake.deleteBucketPolicyMutex.Lock()
	defer fake.deleteBucketPolicyMutex.Unlock()
	fake.DeleteBucketPolicyStub = nil
	fake.deleteBucketPolicyReturns = struct {
		result1 *s3.DeleteBucketPolicyOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeS3Client) DeleteBucketPolicyReturnsOnCall(i int, result1 *s3.DeleteBucketPolicyOutput, result2 error) {
	fake.deleteBucketPolicyMutex.Lock()
	defer fake.deleteBucketPolicyMutex.Unlock()
	fake.DeleteBucketPolicyStub = nil
	if fake.deleteBucketPolicyReturnsOnCall == nil {
		fake.deleteBucketPolicyReturnsOnCall = make(map[int]struct {
			result1 *s3.DeleteBucketPolicyOutput
			result2 error
		})
	}
	fake.deleteBucketPolicyReturnsOnCall[i] = struct {
		result1 *s3.DeleteBucketPolicyOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeS3Client) DeleteObject(arg1 context.Context, arg2 *s3.DeleteObjectInput, arg3 ...func(*s3.Options)) (*s3.DeleteObjectOutput, error) {
	fake.deleteObjectMutex.Lock()
	ret, specificReturn := fake.deleteObjectReturnsOnCall[len(fake.deleteObjectArgsForCall)]
	fake.deleteObjectArgsForCall = append(fake.deleteObjectArgsForCall, struct {
		arg1 context.Context
		arg2 *s3.DeleteObjectInput
		arg3 []func(*s3.Options)
	}{arg1, arg2, arg3})
	stub := fake.DeleteObjectStub
	fakeReturns := fake.deleteObjectReturns
	fake.recordInvocation("DeleteObject", []interface{}{arg1, arg2, arg3})
	fake.deleteObjectMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeS3Client) DeleteObjectCallCount() int {
	fake.deleteObjectMutex.RLock()
	defer fake.deleteObjectMutex.RUnlock()
	return len(fake.deleteObjectArgsForCall)
}

func (fake *FakeS3Client) DeleteObjectCalls(stub func(context.Context, *s3.DeleteObjectInput, ...func(*s3.Options)) (*s3.DeleteObjectOutput, error)) {
	fake.deleteObjectMutex.Lock()
	defer fake.deleteObjectMutex.Unlock()
	fake.DeleteObjectStub = stub
}

func (fake *FakeS3Client) DeleteObjectArgsForCall(i int) (context.Context, *s3.DeleteObjectInput, []func(*s3.Options)) {
	fake.deleteObjectMutex.RLock()
	defer fake.deleteObjectMutex.RUnlock()
	argsForCall := fake.deleteObjectArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeS3Client) DeleteObjectReturns(result1 *s3.DeleteObjectOutput, result2 error) {
	fake.deleteObjectMutex.Lock()
	defer fake.deleteObjectMutex.Unlock()
	fake.DeleteObjectStub = nil
	fake.deleteObjectReturns = struct {
		result1 *s3.DeleteObjectOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeS3Client) DeleteObjectReturnsOnCall(i int, result1 *s3.DeleteObjectOutput, result2 error) {
	fake.deleteObjectMutex.Lock()
	defer fake.deleteObjectMutex.Unlock()
	fake.DeleteObjectStub = nil
	if fake.deleteObjectReturnsOnCall == nil {
		fake.deleteObjectReturnsOnCall = make(map[int]struct {
			result1 *s3.DeleteObjectOutput
			result2 error
		})
	}
	fake.deleteObjectReturnsOnCall[i] = struct {
		result1 *s3.DeleteObjectOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeS3Client) GetBucketAcl(arg1 context.Context, arg2 *s3.GetBucketAclInput, arg3 ...func(*s3.Options)) (*s3.GetBucketAclOutput, error) {
	fake.getBucketAclMutex.Lock()
	ret, specificReturn := fake.getBucketAclReturnsOnCall[len(fake.getBucketAclArgsForCall)]
	fake.getBucketAclArgsForCall = append(fake.getBucketAclArgsForCall, struct {
		arg1 context.Context
		arg2 *s3.GetBucketAclInput
		arg3 []func(*s3.Options)
	}{arg1, arg2, arg3})
	stub := fake.GetBucketAclStub
	fakeReturns := fake.getBucketAclReturns
	fake.recordInvocation("GetBucketAcl", []interface{}{arg1, arg2, arg3})
	fake.getBucketAclMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeS3Client) GetBucketAclCallCount() int {
	fake.getBucketAclMutex.RLock()
	defer fake.getBucketAclMutex.RUnlock()
	return len(fake.getBucketAclArgsForCall)
}

func (fake *FakeS3Client) GetBucketAclCalls(stub func(context.Context, *s3.GetBucketAclInput, ...func(*s3.Options)) (*s3.GetBucketAclOutput, error)) {
	fake.getBucketAclMutex.Lock()
	defer fake.getBucketAclMutex.Unlock()
	fake.GetBucketAclStub = stub
}

func (fake *FakeS3Client) GetBucketAclArgsForCall(i int) (context.Context, *s3.GetBucketAclInput, []func(*s3.Options)) {
	fake.getBucketAclMutex.RLock()
	defer fake.getBucketAclMutex.RUnlock()
	argsForCall := fake.getBucketAclArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeS3Client) GetBucketAclReturns(result1 *s3.GetBucketAclOutput, result2 error) {
	fake.getBucketAclMutex.Lock()
	defer fake.getBucketAclMutex.Unlock()
	fake.GetBucketAclStub = nil
	fake.getBucketAclReturns = struct {
		result1 *s3.GetBucketAclOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeS3Client) GetBucketAclReturnsOnCall(i int, result1 *s3.GetBucketAclOutput, result2 error) {
	fake.getBucketAclMutex.Lock()
	defer fake.getBucketAclMutex.Unlock()
	fake.GetBucketAclStub = nil
	if fake.getBucketAclReturnsOnCall == nil {
		fake.getBucketAclReturnsOnCall = make(map[int]struct {
			result1 *s3.GetBucketAclOutput
			result2 error
		})
	}
	fake.getBucketAclReturnsOnCall[i] = struct {
		result1 *s3.GetBucketAclOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeS3Client) GetBucketLifecycleConfiguration(arg1 context.Context, arg2 *s3.GetBucketLifecycleConfigurationInput, arg3 ...func(*s3.Options)) (*s3.GetBucketLifecycleConfigurationOutput, error) {
	fake.getBucketLifecycleConfigurationMutex.Lock()
	ret, specificReturn := fake.getBucketLifecycleConfigurationReturnsOnCall[len(fake.getBucketLifecycleConfigurationArgsForCall)]
	fake.getBucketLifecycleConfigurationArgsForCall = append(fake.getBucketLifecycleConfigurationArgsForCall, struct {
		arg1 context.Context
		arg2 *s3.GetBucketLifecycleConfigurationInput
		arg3 []func(*s3.Options)
	}{arg1, arg2, arg3})
	stub := fake.GetBucketLifecycleConfigurationStub
	fakeReturns := fake.getBucketLifecycleConfigurationReturns
	fake.recordInvocation("GetBucketLifecycleConfiguration", []interface{}{arg1, arg2, arg3})
	fake.getBucketLifecycleConfigurationMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeS3Client) GetBucketLifecycleConfigurationCallCount() int {
	fake.getBucketLifecycleConfigurationMutex.RLock()
	defer fake.getBucketLifecycleConfigurationMutex.RUnlock()
	return len(fake.getBucketLifecycleConfigurationArgsForCall)
}

func (fake *FakeS3Client) GetBucketLifecycleConfigurationCalls(stub func(context.Context, *s3.GetBucketLifecycleConfigurationInput, ...func(*s3.Options)) (*s3.GetBucketLifecycleConfigurationOutput, error)) {
	fake.getBucketLifecycleConfigurationMutex.Lock()
	defer fake.getBucketLifecycleConfigurationMutex.Unlock()
	fake.GetBucketLifecycleConfigurationStub = stub
}

func (fake *FakeS3Client) GetBucketLifecycleConfigurationArgsForCall(i int) (context.Context, *s3.GetBucketLifecycleConfigurationInput, []func(*s3.Options)) {
	fake.getBucketLifecycleConfigurationMutex.RLock()
	defer fake.getBucketLifecycleConfigurationMutex.RUnlock()
	argsForCall := fake.getBucketLifecycleConfigurationArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeS3Client) GetBucketLifecycleConfigurationReturns(result1 *s3.GetBucketLifecycleConfigurationOutput, result2 error) {
	fake.getBucketLifecycleConfigurationMutex.Lock()
	defer fake.getBucketLifecycleConfigurationMutex.Unlock()
	fake.GetBucketLifecycleConfigurationStub = nil
	fake.getBucketLifecycleConfigurationReturns = struct {
		result1 *s3.GetBucketLifecycleConfigurationOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeS3Client) GetBucketLifecycleConfigurationReturnsOnCall(i int, result1 *s3.GetBucketLifecycleConfigurationOutput, result2 error) {
	fake.getBucketLifecycleConfigurationMutex.Lock()
	defer fake.getBucketLifecycleConfigurationMutex.Unlock()
	fake.GetBucketLifecycleConfigurationStub = nil
	if fake.getBucketLifecycleConfigurationReturnsOnCall == nil {
		fake.getBucketLifecycleConfigurationReturnsOnCall = make(map[int]struct {
			result1 *s3.GetBucketLifecycleConfigurationOutput
			result2 error
		})
	}
	fake.getBucketLifecycleConfigurationReturnsOnCall[i] = struct {
		result1 *s3.GetBucketLifecycleConfigurationOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeS3Client) GetBucketPolicy(arg1 context.Context, arg2 *s3.GetBucketPolicyInput, arg3 ...func(*s3.Options)) (*s3.GetBucketPolicyOutput, error) {
	fake.getBucketPolicyMutex.Lock()
	ret, specificReturn := fake.getBucketPolicyReturnsOnCall[len(fake.getBucketPolicyArgsForCall)]
	fake.getBucketPolicyArgsForCall = append(fake.getBucketPolicyArgsForCall, struct {
		arg1 context.Context
		arg2 *s3.GetBucketPolicyInput
		arg3 []func(*s3.Options)
	}{arg1, arg2, arg3})
	stub := fake.GetBucketPolicyStub
	fakeReturns := fake.getBucketPolicyReturns
	fake.recordInvocation("GetBucketPolicy", []interface{}{arg1, arg2, arg3})
	fake.getBucketPolicyMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeS3Client) GetBucketPolicyCallCount() int {
	fake.getBucketPolicyMutex.RLock()
	defer fake.getBucketPolicyMutex.RUnlock()
	return len(fake.getBucketPolicyArgsForCall)
}

func (fake *FakeS3Client) GetBucketPolicyCalls(stub func(context.Context, *s3.GetBucketPolicyInput, ...func(*s3.Options)) (*s3.GetBucketPolicyOutput, error)) {
	fake.getBucketPolicyMutex.Lock()
	defer fake.getBucketPolicyMutex.Unlock()
	fake.GetBucketPolicyStub = stub
}

func (fake *FakeS3Client) GetBucketPolicyArgsForCall(i int) (context.Context, *s3.GetBucketPolicyInput, []func(*s3.Options)) {
	fake.getBucketPolicyMutex.RLock()
	defer fake.getBucketPolicyMutex.RUnlock()
	argsForCall := fake.getBucketPolicyArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeS3Client) GetBucketPolicyReturns(result1 *s3.GetBucketPolicyOutput, result2 error) {
	fake.getBucketPolicyMutex.Lock()
	defer fake.getBucketPolicyMutex.Unlock()
	fake.GetBucketPolicyStub = nil
	fake.getBucketPolicyReturns = struct {
		result1 *s3.GetBucketPolicyOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeS3Client) GetBucketPolicyReturnsOnCall(i int, result1 *s3.GetBucketPolicyOutput, result2 error) {
	fake.getBucketPolicyMutex.Lock()
	defer fake.getBucketPolicyMutex.Unlock()
	fake.GetBucketPolicyStub = nil
	if fake.getBucketPolicyReturnsOnCall == nil {
		fake.getBucketPolicyReturnsOnCall = make(map[int]struct {
			result1 *s3.GetBucketPolicyOutput
			result2 error
		})
	}
	fake.getBucketPolicyReturnsOnCall[i] = struct {
		result1 *s3.GetBucketPolicyOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeS3Client) GetBucketVersioning(arg1 context.Context, arg2 *s3.GetBucketVersioningInput, arg3 ...func(*s3.Options)) (*s3.GetBucketVersioningOutput, error) {
	fake.getBucketVersioningMutex.Lock()
	ret, specificReturn := fake.getBucketVersioningReturnsOnCall[len(fake.getBucketVersioningArgsForCall)]
	fake.getBucketVersioningArgsForCall = append(fake.getBucketVersioningArgsForCall, struct {
		arg1 context.Context
		arg2 *s3.GetBucketVersioningInput
		arg3 []func(*s3.Options)
	}{arg1, arg2, arg3})
	stub := fake.GetBucketVersioningStub
	fakeReturns := fake.getBucketVersioningReturns
	fake.recordInvocation("GetBucketVersioning", []interface{}{arg1, arg2, arg3})
	fake.getBucketVersioningMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeS3Client) GetBucketVersioningCallCount() int {
	fake.getBucketVersioningMutex.RLock()
	defer fake.getBucketVersioningMutex.RUnlock()
	return len(fake.getBucketVersioningArgsForCall)
}

func (fake *FakeS3Client) GetBucketVersioningCalls(stub func(context.Context, *s3.GetBucketVersioningInput, ...func(*s3.Options)) (*s3.GetBucketVersioningOutput, error)) {
	fake.getBucketVersioningMutex.Lock()
	defer fake.getBucketVersioningMutex.Unlock()
	fake.GetBucketVersioningStub = stub
}

func (fake *FakeS3Client) GetBucketVersioningArgsForCall(i int) (context.Context, *s3.GetBucketVersioningInput, []func(*s3.Options)) {
	fake.getBucketVersioningMutex.RLock()
	defer fake.getBucketVersioningMutex.RUnlock()
	argsForCall := fake.getBucketVersioningArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeS3Client) GetBucketVersioningReturns(result1 *s3.GetBucketVersioningOutput, result2 error) {
	fake.getBucketVersioningMutex.Lock()
	defer fake.getBucketVersioningMutex.Unlock()
	fake.GetBucketVersioningStub = nil
	fake.getBucketVersioningReturns = struct {
		result1 *s3.GetBucketVersioningOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeS3Client) GetBucketVersioningReturnsOnCall(i int, result1 *s3.GetBucketVersioningOutput, result2 error) {
	fake.getBucketVersioningMutex.Lock()
	defer fake.getBucketVersioningMutex.Unlock()
	fake.GetBucketVersioningStub = nil
	if fake.getBucketVersioningReturnsOnCall == nil {
		fake.getBucketVersioningReturnsOnCall = make(map[int]struct {
			result1 *s3.GetBucketVersioningOutput
			result2 error
		})
	}
	fake.getBucketVersioningReturnsOnCall[i] = struct {
		result1 *s3.GetBucketVersioningOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeS3Client) GetObject(arg1 context.Context, arg2 *s3.GetObjectInput, arg3 ...func(*s3.Options)) (*s3.GetObjectOutput, error) {
	fake.getObjectMutex.Lock()
	ret, specificReturn := fake.getObjectReturnsOnCall[len(fake.getObjectArgsForCall)]
	fake.getObjectArgsForCall = append(fake.getObjectArgsForCall, struct {
		arg1 context.Context
		arg2 *s3.GetObjectInput
		arg3 []func(*s3.Options)
	}{arg1, arg2, arg3})
	stub := fake.GetObjectStub
	fakeReturns := fake.getObjectReturns
	fake.recordInvocation("GetObject", []interface{}{arg1, arg2, arg3})
	fake.getObjectMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeS3Client) GetObjectCallCount() int {
	fake.getObjectMutex.RLock()
	defer fake.getObjectMutex.RUnlock()
	return len(fake.getObjectArgsForCall)
}

func (fake *FakeS3Client) GetObjectCalls(stub func(context.Context, *s3.GetObjectInput, ...func(*s3.Options)) (*s3.GetObjectOutput, error)) {
	fake.getObjectMutex.Lock()
	defer fake.getObjectMutex.Unlock()
	fake.GetObjectStub = stub
}

func (fake *FakeS3Client) GetObjectArgsForCall(i int) (context.Context, *s3.GetObjectInput, []func(*s3.Options)) {
	fake.getObjectMutex.RLock()
	defer fake.getObjectMutex.RUnlock()
	argsForCall := fake.getObjectArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeS3Client) GetObjectReturns(result1 *s3.GetObjectOutput, result2 error) {
	fake.getObjectMutex.Lock()
	defer fake.getObjectMutex.Unlock()
	fake.GetObjectStub = nil
	fake.getObjectReturns = struct {
		result1 *s3.GetObjectOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeS3Client) GetObjectReturnsOnCall(i int, result1 *s3.GetObjectOutput, result2 error) {
	fake.getObjectMutex.Lock()
	defer fake.getObjectMutex.Unlock()
	fake.GetObjectStub = nil
	if fake.getObjectReturnsOnCall == nil {
		fake.getObjectReturnsOnCall = make(map[int]struct {
			result1 *s3.GetObjectOutput
			result2 error
		})
	}
	fake.getObjectReturnsOnCall[i] = struct {
		result1 *s3.GetObjectOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeS3Client) GetObjectLockConfiguration(arg1 context.Context, arg2 *s3.GetObjectLockConfigurationInput, arg3 ...func(*s3.Options)) (*s3.GetObjectLockConfigurationOutput, error) {
	fake.getObjectLockConfigurationMutex.Lock()
	ret, specificReturn := fake.getObjectLockConfigurationReturnsOnCall[len(fake.getObjectLockConfigurationArgsForCall)]
	fake.getObjectLockConfigurationArgsForCall = append(fake.getObjectLockConfigurationArgsForCall, struct {
		arg1 context.Context
		arg2 *s3.GetObjectLockConfigurationInput
		arg3 []func(*s3.Options)
	}{arg1, arg2, arg3})
	stub := fake.GetObjectLockConfigurationStub
	fakeReturns := fake.getObjectLockConfigurationReturns
	fake.recordInvocation("GetObjectLockConfiguration", []interface{}{arg1, arg2, arg3})
	fake.getObjectLockConfigurationMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeS3Client) GetObjectLockConfigurationCallCount() int {
	fake.getObjectLockConfigurationMutex.RLock()
	defer fake.getObjectLockConfigurationMutex.RUnlock()
	return len(fake.getObjectLockConfigurationArgsForCall)
}

func (fake *FakeS3Client) GetObjectLockConfigurationCalls(stub func(context.Context, *s3.GetObjectLockConfigurationInput, ...func(*s3.Options)) (*s3.GetObjectLockConfigurationOutput, error)) {
	fake.getObjectLockConfigurationMutex.Lock()
	defer fake.getObjectLockConfigurationMutex.Unlock()
	fake.GetObjectLockConfigurationStub = stub
}

func (fake *FakeS3Client) GetObjectLockConfigurationArgsForCall(i int) (context.Context, *s3.GetObjectLockConfigurationInput, []func(*s3.Options)) {
	fake.getObjectLockConfigurationMutex.RLock()
	defer fake.getObjectLockConfigurationMutex.RUnlock()
	argsForCall := fake.getObjectLockConfigurationArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeS3Client) GetObjectLockConfigurationReturns(result1 *s3.GetObjectLockConfigurationOutput, result2 error) {
	fake.getObjectLockConfigurationMutex.Lock()
	defer fake.getObjectLockConfigurationMutex.Unlock()
	fake.GetObjectLockConfigurationStub = nil
	fake.getObjectLockConfigurationReturns = struct {
		result1 *s3.GetObjectLockConfigurationOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeS3Client) GetObjectLockConfigurationReturnsOnCall(i int, result1 *s3.GetObjectLockConfigurationOutput, result2 error) {
	fake.getObjectLockConfigurationMutex.Lock()
	defer fake.getObjectLockConfigurationMutex.Unlock()
	fake.GetObjectLockConfigurationStub = nil
	if fake.getObjectLockConfigurationReturnsOnCall == nil {
		fake.getObjectLockConfigurationReturnsOnCall = make(map[int]struct {
			result1 *s3.GetObjectLockConfigurationOutput
			result2 error
		})
	}
	fake.getObjectLockConfigurationReturnsOnCall[i] = struct {
		result1 *s3.GetObjectLockConfigurationOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeS3Client) HeadBucket(arg1 context.Context, arg2 *s3.HeadBucketInput, arg3 ...func(*s3.Options)) (*s3.HeadBucketOutput, error) {
	fake.headBucketMutex.Lock()
	ret, specificReturn := fake.headBucketReturnsOnCall[len(fake.headBucketArgsForCall)]
	fake.headBucketArgsForCall = append(fake.headBucketArgsForCall, struct {
		arg1 context.Context
		arg2 *s3.HeadBucketInput
		arg3 []func(*s3.Options)
	}{arg1, arg2, arg3})
	stub := fake.HeadBucketStub
	fakeReturns := fake.headBucketReturns
	fake.recordInvocation("HeadBucket", []interface{}{arg1, arg2, arg3})
	fake.headBucketMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeS3Client) HeadBucketCallCount() int {
	fake.headBucketMutex.RLock()
	defer fake.headBucketMutex.RUnlock()
	return len(fake.headBucketArgsForCall)
}

func (fake *FakeS3Client) HeadBucketCalls(stub func(context.Context, *s3.HeadBucketInput, ...func(*s3.Options)) (*s3.HeadBucketOutput, error)) {
	fake.headBucketMutex.Lock()
	defer fake.headBucketMutex.Unlock()
	fake.HeadBucketStub = stub
}

func (fake *FakeS3Client) HeadBucketArgsForCall(i int) (context.Context, *s3.HeadBucketInput, []func(*s3.Options)) {
	fake.headBucketMutex.RLock()
	defer fake.headBucketMutex.RUnlock()
	argsForCall := fake.headBucketArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeS3Client) HeadBucketReturns(result1 *s3.HeadBucketOutput, result2 error) {
	fake.headBucketMutex.Lock()
	defer fake.headBucketMutex.Unlock()
	fake.HeadBucketStub = nil
	fake.headBucketReturns = struct {
		result1 *s3.HeadBucketOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeS3Client) HeadBucketReturnsOnCall(i int, result1 *s3.HeadBucketOutput, result2 error) {
	fake.headBucketMutex.Lock()
	defer fake.headBucketMutex.Unlock()
	fake.HeadBucketStub = nil
	if fake.headBucketReturnsOnCall == nil {
		fake.headBucketReturnsOnCall = make(map[int]struct {
			result1 *s3.HeadBucketOutput
			result2 error
		})
	}
	fake.headBucketReturnsOnCall[i] = struct {
		result1 *s3.HeadBucketOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeS3Client) ListObjectVersions(arg1 context.Context, arg2 *s3.ListObjectVersionsInput, arg3 ...func(*s3.Options)) (*s3.ListObjectVersionsOutput, error) {
	fake.listObjectVersionsMutex.Lock()
	ret, specificReturn := fake.listObjectVersionsReturnsOnCall[len(fake.listObjectVersionsArgsForCall)]
	fake.listObjectVersionsArgsForCall = append(fake.listObjectVersionsArgsForCall, struct {
		arg1 context.Context
		arg2 *s3.ListObjectVersionsInput
		arg3 []func(*s3.Options)
	}{arg1, arg2, arg3})
	stub := fake.ListObjectVersionsStub
	fakeReturns := fake.listObjectVersionsReturns
	fake.recordInvocation("ListObjectVersions", []interface{}{arg1, arg2, arg3})
	fake.listObjectVersionsMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeS3Client) ListObjectVersionsCallCount() int {
	fake.listObjectVersionsMutex.RLock()
	defer fake.listObjectVersionsMutex.RUnlock()
	return len(fake.listObjectVersionsArgsForCall)
}

func (fake *FakeS3Client) ListObjectVersionsCalls(stub func(context.Context, *s3.ListObjectVersionsInput, ...func(*s3.Options)) (*s3.ListObjectVersionsOutput, error)) {
	fake.listObjectVersionsMutex.Lock()
	defer fake.listObjectVersionsMutex.Unlock()
	fake.ListObjectVersionsStub = stub
}

func (fake *FakeS3Client) ListObjectVersionsArgsForCall(i int) (context.Context, *s3.ListObjectVersionsInput, []func(*s3.Options)) {
	fake.listObjectVersionsMutex.RLock()
	defer fake.listObjectVersionsMutex.RUnlock()
	argsForCall := fake.listObjectVersionsArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeS3Client) ListObjectVersionsReturns(result1 *s3.ListObjectVersionsOutput, result2 error) {
	fake.listObjectVersionsMutex.Lock()
	defer fake.listObjectVersionsMutex.Unlock()
	fake.ListObjectVersionsStub = nil
	fake.listObjectVersionsReturns = struct {
		result1 *s3.ListObjectVersionsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeS3Client) ListObjectVersionsReturnsOnCall(i int, result1 *s3.ListObjectVersionsOutput, result2 error) {
	fake.listObjectVersionsMutex.Lock()
	defer fake.listObjectVersionsMutex.Unlock()
	fake.ListObjectVersionsStub = nil
	if fake.listObjectVersionsReturnsOnCall == nil {
		fake.listObjectVersionsReturnsOnCall = make(map[int]struct {
			result1 *s3.ListObjectVersionsOutput
			result2 error
		})
	}
	fake.listObjectVersionsReturnsOnCall[i] = struct {
		result1 *s3.ListObjectVersionsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeS3Client) ListObjectsV2(arg1 context.Context, arg2 *s3.ListObjectsV2Input, arg3 ...func(*s3.Options)) (*s3.ListObjectsV2Output, error) {
	fake.listObjectsV2Mutex.Lock()
	ret, specificReturn := fake.listObjectsV2ReturnsOnCall[len(fake.listObjectsV2ArgsForCall)]
	fake.listObjectsV2ArgsForCall = append(fake.listObjectsV2ArgsForCall, struct {
		arg1 context.Context
		arg2 *s3.ListObjectsV2Input
		arg3 []func(*s3.Options)
	}{arg1, arg2, arg3})
	stub := fake.ListObjectsV2Stub
	fakeReturns := fake.listObjectsV2Returns
	fake.recordInvocation("ListObjectsV2", []interface{}{arg1, arg2, arg3})
	fake.listObjectsV2Mutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeS3Client) ListObjectsV2CallCount() int {
	fake.listObjectsV2Mutex.RLock()
	defer fake.listObjectsV2Mutex.RUnlock()
	return len(fake.listObjectsV2ArgsForCall)
}

func (fake *FakeS3Client) ListObjectsV2Calls(stub func(context.Context, *s3.ListObjectsV2Input, ...func(*s3.Options)) (*s3.ListObjectsV2Output, error)) {
	fake.listObjectsV2Mutex.Lock()
	defer fake.listObjectsV2Mutex.Unlock()
	fake.ListObjectsV2Stub = stub
}

func (fake *FakeS3Client) ListObjectsV2ArgsForCall(i int) (context.Context, *s3.ListObjectsV2Input, []func(*s3.Options)) {
	fake.listObjectsV2Mutex.RLock()
	defer fake.listObjectsV2Mutex.RUnlock()
	argsForCall := fake.listObjectsV2ArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeS3Client) ListObjectsV2Returns(result1 *s3.ListObjectsV2Output, result2 error) {
	fake.listObjectsV2Mutex.Lock()
	defer fake.listObjectsV2Mutex.Unlock()
	fake.ListObjectsV2Stub = nil
	fake.listObjectsV2Returns = struct {
		result1 *s3.ListObjectsV2Output
		result2 error
	}{result1, result2}
}

func (fake *FakeS3Client) ListObjectsV2ReturnsOnCall(i int, result1 *s3.ListObjectsV2Output, result2 error) {
	fake.listObjectsV2Mutex.Lock()
	defer fake.listObjectsV2Mutex.Unlock()
	fake.ListObjectsV2Stub = nil
	if fake.listObjectsV2ReturnsOnCall == nil {
		fake.listObjectsV2ReturnsOnCall = make(map[int]struct {
			result1 *s3.ListObjectsV2Output
			result2 error
		})
	}
	fake.listObjectsV2ReturnsOnCall[i] = struct {
		result1 *s3.ListObjectsV2Output
		result2 error
	}{result1, result2}
}

func (fake *FakeS3Client) PutBucketAcl(arg1 context.Context, arg2 *s3.PutBucketAclInput, arg3 ...func(*s3.Options)) (*s3.PutBucketAclOutput, error) {
	fake.putBucketAclMutex.Lock()
	ret, specificReturn := fake.putBucketAclReturnsOnCall[len(fake.putBucketAclArgsForCall)]
	fake.putBucketAclArgsForCall = append(fake.putBucketAclArgsForCall, struct {
		arg1 context.Context
		arg2 *s3.PutBucketAclInput
		arg3 []func(*s3.Options)
	}{arg1, arg2, arg3})
	stub := fake.PutBucketAclStub
	fakeReturns := fake.putBucketAclReturns
	fake.recordInvocation("PutBucketAcl", []interface{}{arg1, arg2, arg3})
	fake.putBucketAclMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeS3Client) PutBucketAclCallCount() int {
	fake.putBucketAclMutex.RLock()
	defer fake.putBucketAclMutex.RUnlock()
	return len(fake.putBucketAclArgsForCall)
}

func (fake *FakeS3Client) PutBucketAclCalls(stub func(context.Context, *s3.PutBucketAclInput, ...func(*s3.Options)) (*s3.PutBucketAclOutput, error)) {
	fake.putBucketAclMutex.Lock()
	defer fake.putBucketAclMutex.Unlock()
	fake.PutBucketAclStub = stub
}

func (fake *FakeS3Client) PutBucketAclArgsForCall(i int) (context.Context, *s3.PutBucketAclInput, []func(*s3.Options)) {
	fake.putBucketAclMutex.RLock()
	defer fake.putBucketAclMutex.RUnlock()
	argsForCall := fake.putBucketAclArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeS3Client) PutBucketAclReturns(result1 *s3.PutBucketAclOutput, result2 error) {
	fake.putBucketAclMutex.Lock()
	defer fake.putBucketAclMutex.Unlock()
	fake.PutBucketAclStub = nil
	fake.putBucketAclReturns = struct {
		result1 *s3.PutBucketAclOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeS3Client) PutBucketAclReturnsOnCall(i int, result1 *s3.PutBucketAclOutput, result2 error) {
	fake.putBucketAclMutex.Lock()
	defer fake.putBucketAclMutex.Unlock()
	fake.PutBucketAclStub = nil
	if fake.putBucketAclReturnsOnCall == nil {
		fake.putBucketAclReturnsOnCall = make(map[int]struct {
			result1 *s3.PutBucketAclOutput
			result2 error
		})
	}
	fake.putBucketAclReturnsOnCall[i] = struct {
		result1 *s3.PutBucketAclOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeS3Client) PutBucketLifecycleConfiguration(arg1 context.Context, arg2 *s3.PutBucketLifecycleConfigurationInput, arg3 ...func(*s3.Options)) (*s3.PutBucketLifecycleConfigurationOutput, error) {
	fake.putBucketLifecycleConfigurationMutex.Lock()
	ret, specificReturn := fake.putBucketLifecycleConfigurationReturnsOnCall[len(fake.putBucketLifecycleConfigurationArgsForCall)]
	fake.putBucketLifecycleConfigurationArgsForCall = append(fake.putBucketLifecycleConfigurationArgsForCall, struct {
		arg1 context.Context
		arg2 *s3.PutBucketLifecycleConfigurationInput
		arg3 []func(*s3.Options)
	}{arg1, arg2, arg3})
	stub := fake.PutBucketLifecycleConfigurationStub
	fakeReturns := fake.putBucketLifecycleConfigurationReturns
	fake.recordInvocation("PutBucketLifecycleConfiguration", []interface{}{arg1, arg2, arg3})
	fake.putBucketLifecycleConfigurationMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeS3Client) PutBucketLifecycleConfigurationCallCount() int {
	fake.putBucketLifecycleConfigurationMutex.RLock()
	defer fake.putBucketLifecycleConfigurationMutex.RUnlock()
	return len(fake.putBucketLifecycleConfigurationArgsForCall)
}

func (fake *FakeS3Client) PutBucketLifecycleConfigurationCalls(stub func(context.Context, *s3.PutBucketLifecycleConfigurationInput, ...func(*s3.Options)) (*s3.PutBucketLifecycleConfigurationOutput, error)) {
	fake.putBucketLifecycleConfigurationMutex.Lock()
	defer fake.putBucketLifecycleConfigurationMutex.Unlock()
	fake.PutBucketLifecycleConfigurationStub = stub
}

func (fake *FakeS3Client) PutBucketLifecycleConfigurationArgsForCall(i int) (context.Context, *s3.PutBucketLifecycleConfigurationInput, []func(*s3.Options)) {
	fake.putBucketLifecycleConfigurationMutex.RLock()
	defer fake.putBucketLifecycleConfigurationMutex.RUnlock()
	argsForCall := fake.putBucketLifecycleConfigurationArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeS3Client) PutBucketLifecycleConfigurationReturns(result1 *s3.PutBucketLifecycleConfigurationOutput, result2 error) {
	fake.putBucketLifecycleConfigurationMutex.Lock()
	defer fake.putBucketLifecycleConfigurationMutex.Unlock()
	fake.PutBucketLifecycleConfigurationStub = nil
	fake.putBucketLifecycleConfigurationReturns = struct {
		result1 *s3.PutBucketLifecycleConfigurationOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeS3Client) PutBucketLifecycleConfigurationReturnsOnCall(i int, result1 *s3.PutBucketLifecycleConfigurationOutput, result2 error) {
	fake.putBucketLifecycleConfigurationMutex.Lock()
	defer fake.putBucketLifecycleConfigurationMutex.Unlock()
	fake.PutBucketLifecycleConfigurationStub = nil
	if fake.putBucketLifecycleConfigurationReturnsOnCall == nil {
		fake.putBucketLifecycleConfigurationReturnsOnCall = make(map[int]struct {
			result1 *s3.PutBucketLifecycleConfigurationOutput
			result2 error
		})
	}
	fake.putBucketLifecycleConfigurationReturnsOnCall[i] = struct {
		result1 *s3.PutBucketLifecycleConfigurationOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeS3Client) PutBucketPolicy(arg1 context.Context, arg2 *s3.PutBucketPolicyInput, arg3 ...func(*s3.Options)) (*s3.PutBucketPolicyOutput, error) {
	fake.putBucketPolicyMutex.Lock()
	ret, specificReturn := fake.putBucketPolicyReturnsOnCall[len(fake.putBucketPolicyArgsForCall)]
	fake.putBucketPolicyArgsForCall = append(fake.putBucketPolicyArgsForCall, struct {
		arg1 context.Context
		arg2 *s3.PutBucketPolicyInput
		arg3 []func(*s3.Options)
	}{arg1, arg2, arg3})
	stub := fake.PutBucketPolicyStub
	fakeReturns := fake.putBucketPolicyReturns
	fake.recordInvocation("PutBucketPolicy", []interface{}{arg1, arg2, arg3})
	fake.putBucketPolicyMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeS3Client) PutBucketPolicyCallCount() int {
	fake.putBucketPolicyMutex.RLock()
	defer fake.putBucketPolicyMutex.RUnlock()
	return len(fake.putBucketPolicyArgsForCall)
}

func (fake *FakeS3Client) PutBucketPolicyCalls(stub func(context.Context, *s3.PutBucketPolicyInput, ...func(*s3.Options)) (*s3.PutBucketPolicyOutput, error)) {
	fake.putBucketPolicyMutex.Lock()
	defer fake.putBucketPolicyMutex.Unlock()
	fake.PutBucketPolicyStub = stub
}

func (fake *FakeS3Client) PutBucketPolicyArgsForCall(i int) (context.Context, *s3.PutBucketPolicyInput, []func(*s3.Options)) {
	fake.putBucketPolicyMutex.RLock()
	defer fake.putBucketPolicyMutex.RUnlock()
	argsForCall := fake.putBucketPolicyArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeS3Client) PutBucketPolicyReturns(result1 *s3.PutBucketPolicyOutput, result2 error) {
	fake.putBucketPolicyMutex.Lock()
	defer fake.putBucketPolicyMutex.Unlock()
	fake.PutBucketPolicyStub = nil
	fake.putBucketPolicyReturns = struct {
		result1 *s3.PutBucketPolicyOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeS3Client) PutBucketPolicyReturnsOnCall(i int, result1 *s3.PutBucketPolicyOutput, result2 error) {
	fake.putBucketPolicyMutex.Lock()
	defer fake.putBucketPolicyMutex.Unlock()
	fake.PutBucketPolicyStub = nil
	if fake.putBucketPolicyReturnsOnCall == nil {
		fake.putBucketPolicyReturnsOnCall = make(map[int]struct {
			result1 *s3.PutBucketPolicyOutput
			result2 error
		})
	}
	fake.putBucketPolicyReturnsOnCall[i] = struct {
		result1 *s3.PutBucketPolicyOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeS3Client) PutBucketVersioning(arg1 context.Context, arg2 *s3.PutBucketVersioningInput, arg3 ...func(*s3.Options)) (*s3.PutBucketVersioningOutput, error) {
	fake.putBucketVersioningMutex.Lock()
	ret, specificReturn := fake.putBucketVersioningReturnsOnCall[len(fake.putBucketVersioningArgsForCall)]
	fake.putBucketVersioningArgsForCall = append(fake.putBucketVersioningArgsForCall, struct {
		arg1 context.Context
		arg2 *s3.PutBucketVersioningInput
		arg3 []func(*s3.Options)
	}{arg1, arg2, arg3})
	stub := fake.PutBucketVersioningStub
	fakeReturns := fake.putBucketVersioningReturns
	fake.recordInvocation("PutBucketVersioning", []interface{}{arg1, arg2, arg3})
	fake.putBucketVersioningMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeS3Client) PutBucketVersioningCallCount() int {
	fake.putBucketVersioningMutex.RLock()
	defer fake.putBucketVersioningMutex.RUnlock()
	return len(fake.putBucketVersioningArgsForCall)
}

func (fake *FakeS3Client) PutBucketVersioningCalls(stub func(context.Context, *s3.PutBucketVersioningInput, ...func(*s3.Options)) (*s3.PutBucketVersioningOutput, error)) {
	fake.putBucketVersioningMutex.Lock()
	defer fake.putBucketVersioningMutex.Unlock()
	fake.PutBucketVersioningStub = stub
}

func (fake *FakeS3Client) PutBucketVersioningArgsForCall(i int) (context.Context, *s3.PutBucketVersioningInput, []func(*s3.Options)) {
	fake.putBucketVersioningMutex.RLock()
	defer fake.putBucketVersioningMutex.RUnlock()
	argsForCall := fake.putBucketVersioningArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeS3Client) PutBucketVersioningReturns(result1 *s3.PutBucketVersioningOutput, result2 error) {
	fake.putBucketVersioningMutex.Lock()
	defer fake.putBucketVersioningMutex.Unlock()
	fake.PutBucketVersioningStub = nil
	fake.putBucketVersioningReturns = struct {
		result1 *s3.PutBucketVersioningOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeS3Client) PutBucketVersioningReturnsOnCall(i int, result1 *s3.PutBucketVersioningOutput, result2 error) {
	fake.putBucketVersioningMutex.Lock()
	defer fake.putBucketVersioningMutex.Unlock()
	fake.PutBucketVersioningStub = nil
	if fake.putBucketVersioningReturnsOnCall == nil {
		fake.putBucketVersioningReturnsOnCall = make(map[int]struct {
			result1 *s3.PutBucketVersioningOutput
			result2 error
		})
	}
	fake.putBucketVersioningReturnsOnCall[i] = struct {
		result1 *s3.PutBucketVersioningOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeS3Client) PutObject(arg1 context.Context, arg2 *s3.PutObjectInput, arg3 ...func(*s3.Options)) (*s3.PutObjectOutput, error) {
	fake.putObjectMutex.Lock()
	ret, specificReturn := fake.putObjectReturnsOnCall[len(fake.putObjectArgsForCall)]
	fake.putObjectArgsForCall = append(fake.putObjectArgsForCall, struct {
		arg1 context.Context
		arg2 *s3.PutObjectInput
		arg3 []func(*s3.Options)
	}{arg1, arg2, arg3})
	stub := fake.PutObjectStub
	fakeReturns := fake.putObjectReturns
	fake.recordInvocation("PutObject", []interface{}{arg1, arg2, arg3})
	fake.putObjectMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeS3Client) PutObjectCallCount() int {
	fake.putObjectMutex.RLock()
	defer fake.putObjectMutex.RUnlock()
	return len(fake.putObjectArgsForCall)
}

func (fake *FakeS3Client) PutObjectCalls(stub func(context.Context, *s3.PutObjectInput, ...func(*s3.Options)) (*s3.PutObjectOutput, error)) {
	fake.putObjectMutex.Lock()
	defer fake.putObjectMutex.Unlock()
	fake.PutObjectStub = stub
}

func (fake *FakeS3Client) PutObjectArgsForCall(i int) (context.Context, *s3.PutObjectInput, []func(*s3.Options)) {
	fake.putObjectMutex.RLock()
	defer fake.putObjectMutex.RUnlock()
	argsForCall := fake.putObjectArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeS3Client) PutObjectReturns(result1 *s3.PutObjectOutput, result2 error) {
	fake.putObjectMutex.Lock()
	defer fake.putObjectMutex.Unlock()
	fake.PutObjectStub = nil
	fake.putObjectReturns = struct {
		result1 *s3.PutObjectOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeS3Client) PutObjectReturnsOnCall(i int, result1 *s3.PutObjectOutput, result2 error) {
	fake.putObjectMutex.Lock()
	defer fake.putObjectMutex.Unlock()
	fake.PutObjectStub = nil
	if fake.putObjectReturnsOnCall == nil {
		fake.putObjectReturnsOnCall = make(map[int]struct {
			result1 *s3.PutObjectOutput
			result2 error
		})
	}
	fake.putObjectReturnsOnCall[i] = struct {
		result1 *s3.PutObjectOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeS3Client) PutObjectLockConfiguration(arg1 context.Context, arg2 *s3.PutObjectLockConfigurationInput, arg3 ...func(*s3.Options)) (*s3.PutObjectLockConfigurationOutput, error) {
	fake.putObjectLockConfigurationMutex.Lock()
	ret, specificReturn := fake.putObjectLockConfigurationReturnsOnCall[len(fake.putObjectLockConfigurationArgsForCall)]
	fake.putObjectLockConfigurationArgsForCall = append(fake.putObjectLockConfigurationArgsForCall, struct {
		arg1 context.Context
		arg2 *s3.PutObjectLockConfigurationInput
		arg3 []func(*s3.Options)
	}{arg1, arg2, arg3})
	stub := fake.PutObjectLockConfigurationStub
	fakeReturns := fake.putObjectLockConfigurationReturns
	fake.recordInvocation("PutObjectLockConfiguration", []interface{}{arg1, arg2, arg3})
	fake.putObjectLockConfigurationMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeS3Client) PutObjectLockConfigurationCallCount() int {
	fake.putObjectLockConfigurationMutex.RLock()
	defer fake.putObjectLockConfigurationMutex.RUnlock()
	return len(fake.putObjectLockConfigurationArgsForCall)
}

func (fake *FakeS3Client) PutObjectLockConfigurationCalls(stub func(context.Context, *s3.PutObjectLockConfigurationInput, ...func(*s3.Options)) (*s3.PutObjectLockConfigurationOutput, error)) {
	fake.putObjectLockConfigurationMutex.Lock()
	defer fake.putObjectLockConfigurationMutex.Unlock()
	fake.PutObjectLockConfigurationStub = stub
}

func (fake *FakeS3Client) PutObjectLockConfigurationArgsForCall(i int) (context.Context, *s3.PutObjectLockConfigurationInput, []func(*s3.Options)) {
	fake.putObjectLockConfigurationMutex.RLock()
	defer fake.putObjectLockConfigurationMutex.RUnlock()
	argsForCall := fake.putObjectLockConfigurationArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeS3Client) PutObjectLockConfigurationReturns(result1 *s3.PutObjectLockConfigurationOutput, result2 error) {
	fake.putObjectLockConfigurationMutex.Lock()
	defer fake.putObjectLockConfigurationMutex.Unlock()
	fake.PutObjectLockConfigurationStub = nil
	fake.putObjectLockConfigurationReturns = struct {
		result1 *s3.PutObjectLockConfigurationOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeS3Client) PutObjectLockConfigurationReturnsOnCall(i int, result1 *s3.PutObjectLockConfigurationOutput, result2 error) {
	fake.putObjectLockConfigurationMutex.Lock()
	defer fake.putObjectLockConfigurationMutex.Unlock()
	fake.PutObjectLockConfigurationStub = nil
	if fake.putObjectLockConfigurationReturnsOnCall == nil {
		fake.putObjectLockConfigurationReturnsOnCall = make(map[int]struct {
			result1 *s3.PutObjectLockConfigurationOutput
			result2 error
		})
	}
	fake.putObjectLockConfigurationReturnsOnCall[i] = struct {
		result1 *s3.PutObjectLockConfigurationOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeS3Client) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.createBucketMutex.RLock()
	defer fake.createBucketMutex.RUnlock()
	fake.deleteBucketMutex.RLock()
	defer fake.deleteBucketMutex.RUnlock()
	fake.deleteBucketLifecycleMutex.RLock()
	defer fake.deleteBucketLifecycleMutex.RUnlock()
	fake.deleteBucketPolicyMutex.RLock()
	defer fake.deleteBucketPolicyMutex.RUnlock()
	fake.deleteObjectMutex.RLock()
	defer fake.deleteObjectMutex.RUnlock()
	fake.getBucketAclMutex.RLock()
	defer fake.getBucketAclMutex.RUnlock()
	fake.getBucketLifecycleConfigurationMutex.RLock()
	defer fake.getBucketLifecycleConfigurationMutex.RUnlock()
	fake.getBucketPolicyMutex.RLock()
	defer fake.getBucketPolicyMutex.RUnlock()
	fake.getBucketVersioningMutex.RLock()
	defer fake.getBucketVersioningMutex.RUnlock()
	fake.getObjectMutex.RLock()
	defer fake.getObjectMutex.RUnlock()
	fake.getObjectLockConfigurationMutex.RLock()
	defer fake.getObjectLockConfigurationMutex.RUnlock()
	fake.headBucketMutex.RLock()
	defer fake.headBucketMutex.RUnlock()
	fake.listObjectVersionsMutex.RLock()
	defer fake.listObjectVersionsMutex.RUnlock()
	fake.listObjectsV2Mutex.RLock()
	defer fake.listObjectsV2Mutex.RUnlock()
	fake.putBucketAclMutex.RLock()
	defer fake.putBucketAclMutex.RUnlock()
	fake.putBucketLifecycleConfigurationMutex.RLock()
	defer fake.putBucketLifecycleConfigurationMutex.RUnlock()
	fake.putBucketPolicyMutex.RLock()
	defer fake.putBucketPolicyMutex.RUnlock()
	fake.putBucketVersioningMutex.RLock()
	defer fake.putBucketVersioningMutex.RUnlock()
	fake.putObjectMutex.RLock()
	defer fake.putObjectMutex.RUnlock()
	fake.putObjectLockConfigurationMutex.RLock()
	defer fake.putObjectLockConfigurationMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeS3Client) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ backendstore.S3Client = new(FakeS3Client)
