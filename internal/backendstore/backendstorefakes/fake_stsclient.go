// Code generated by counterfeiter. DO NOT EDIT.
package backendstorefakes

import (
	"context"
	"sync"

	"github.com/aws/aws-sdk-go-v2/service/sts"
	"github.com/linode/provider-ceph/internal/backendstore"
)

type FakeSTSClient struct {
	AssumeRoleStub        func(context.Context, *sts.AssumeRoleInput, ...func(*sts.Options)) (*sts.AssumeRoleOutput, error)
	assumeRoleMutex       sync.RWMutex
	assumeRoleArgsForCall []struct {
		arg1 context.Context
		arg2 *sts.AssumeRoleInput
		arg3 []func(*sts.Options)
	}
	assumeRoleReturns struct {
		result1 *sts.AssumeRoleOutput
		result2 error
	}
	assumeRoleReturnsOnCall map[int]struct {
		result1 *sts.AssumeRoleOutput
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeSTSClient) AssumeRole(arg1 context.Context, arg2 *sts.AssumeRoleInput, arg3 ...func(*sts.Options)) (*sts.AssumeRoleOutput, error) {
	fake.assumeRoleMutex.Lock()
	ret, specificReturn := fake.assumeRoleReturnsOnCall[len(fake.assumeRoleArgsForCall)]
	fake.assumeRoleArgsForCall = append(fake.assumeRoleArgsForCall, struct {
		arg1 context.Context
		arg2 *sts.AssumeRoleInput
		arg3 []func(*sts.Options)
	}{arg1, arg2, arg3})
	stub := fake.AssumeRoleStub
	fakeReturns := fake.assumeRoleReturns
	fake.recordInvocation("AssumeRole", []interface{}{arg1, arg2, arg3})
	fake.assumeRoleMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeSTSClient) AssumeRoleCallCount() int {
	fake.assumeRoleMutex.RLock()
	defer fake.assumeRoleMutex.RUnlock()
	return len(fake.assumeRoleArgsForCall)
}

func (fake *FakeSTSClient) AssumeRoleCalls(stub func(context.Context, *sts.AssumeRoleInput, ...func(*sts.Options)) (*sts.AssumeRoleOutput, error)) {
	fake.assumeRoleMutex.Lock()
	defer fake.assumeRoleMutex.Unlock()
	fake.AssumeRoleStub = stub
}

func (fake *FakeSTSClient) AssumeRoleArgsForCall(i int) (context.Context, *sts.AssumeRoleInput, []func(*sts.Options)) {
	fake.assumeRoleMutex.RLock()
	defer fake.assumeRoleMutex.RUnlock()
	argsForCall := fake.assumeRoleArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeSTSClient) AssumeRoleReturns(result1 *sts.AssumeRoleOutput, result2 error) {
	fake.assumeRoleMutex.Lock()
	defer fake.assumeRoleMutex.Unlock()
	fake.AssumeRoleStub = nil
	fake.assumeRoleReturns = struct {
		result1 *sts.AssumeRoleOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeSTSClient) AssumeRoleReturnsOnCall(i int, result1 *sts.AssumeRoleOutput, result2 error) {
	fake.assumeRoleMutex.Lock()
	defer fake.assumeRoleMutex.Unlock()
	fake.AssumeRoleStub = nil
	if fake.assumeRoleReturnsOnCall == nil {
		fake.assumeRoleReturnsOnCall = make(map[int]struct {
			result1 *sts.AssumeRoleOutput
			result2 error
		})
	}
	fake.assumeRoleReturnsOnCall[i] = struct {
		result1 *sts.AssumeRoleOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeSTSClient) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.assumeRoleMutex.RLock()
	defer fake.assumeRoleMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeSTSClient) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ backendstore.STSClient = new(FakeSTSClient)
