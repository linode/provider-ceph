---
apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  annotations:
    controller-gen.kubebuilder.io/version: v0.13.0
  name: buckets.provider-ceph.ceph.crossplane.io
spec:
  group: provider-ceph.ceph.crossplane.io
  names:
    categories:
    - crossplane
    - managed
    - ceph
    kind: Bucket
    listKind: BucketList
    plural: buckets
    singular: bucket
  scope: Cluster
  versions:
  - additionalPrinterColumns:
    - jsonPath: .status.conditions[?(@.type=='Ready')].status
      name: READY
      type: string
    - jsonPath: .status.conditions[?(@.type=='Synced')].status
      name: SYNCED
      type: string
    - jsonPath: .metadata.annotations.crossplane\.io/external-name
      name: EXTERNAL-NAME
      type: string
    - jsonPath: .metadata.creationTimestamp
      name: AGE
      type: date
    name: v1alpha1
    schema:
      openAPIV3Schema:
        description: A Bucket is an example API type.
        properties:
          apiVersion:
            description: 'APIVersion defines the versioned schema of this representation
              of an object. Servers should convert recognized schemas to the latest
              internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
            type: string
          kind:
            description: 'Kind is a string value representing the REST resource this
              object represents. Servers may infer this from the endpoint the client
              submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
            type: string
          metadata:
            type: object
          spec:
            description: A BucketSpec defines the desired state of a Bucket.
            properties:
              autoPause:
                description: AutoPause allows the user to disable further reconciliation
                  of the bucket after successfully created or updated. If `crossplane.io/paused`
                  label is `true`, disables reconciliation of object. If `crossplane.io/paused`
                  label is missing or empty, triggers auto pause function. Any other
                  value disables auto pause function on bucket.
                type: boolean
              deletionPolicy:
                default: Delete
                description: 'DeletionPolicy specifies what will happen to the underlying
                  external when this managed resource is deleted - either "Delete"
                  or "Orphan" the external resource. This field is planned to be deprecated
                  in favor of the ManagementPolicies field in a future release. Currently,
                  both could be set independently and non-default values would be
                  honored if the feature flag is enabled. See the design doc for more
                  information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223'
                enum:
                - Orphan
                - Delete
                type: string
              disabled:
                description: Disabled allows the user to create a Bucket CR without
                  creating buckets on any S3 backends. If an existing bucket CR is
                  updated with Disabled=true, then provider-ceph attempts to remove
                  any existing buckets from the existing S3 backends and the Bucket
                  CR's status is updated accordingly. This flag overrides 'Providers'.
                type: boolean
              forProvider:
                description: BucketParameters are the configurable fields of a Bucket.
                properties:
                  acl:
                    description: The canned ACL to apply to the bucket.
                    type: string
                  grantFullControl:
                    description: Allows grantee the read, write, read ACP, and write
                      ACP permissions on the bucket.
                    type: string
                  grantRead:
                    description: Allows grantee to list the objects in the bucket.
                    type: string
                  grantReadACP:
                    description: Allows grantee to read the bucket ACL.
                    type: string
                  grantWrite:
                    description: "Allows grantee to create new objects in the bucket.
                      \n For the bucket and object owners of existing objects, also
                      allows deletions and overwrites of those objects."
                    type: string
                  grantWriteACP:
                    description: Allows grantee to write the ACL for the applicable
                      bucket.
                    type: string
                  lifecycleConfiguration:
                    description: Creates a new lifecycle configuration for the bucket
                      or replaces an existing lifecycle configuration. For information
                      about lifecycle configuration, see Managing Access Permissions
                      to Your Amazon S3 Resources (https://docs.aws.amazon.com/AmazonS3/latest/dev/s3-access-control.html).
                    properties:
                      rules:
                        description: "A lifecycle rule for individual objects in a
                          bucket. \n Rules is a required field"
                        items:
                          description: LifecycleRule for individual objects in a bucket.
                          properties:
                            abortIncompleteMultipartUpload:
                              description: Specifies the days since the initiation
                                of an incomplete multipart upload that will be waited
                                before permanently removing all parts of the upload.
                                For more information, see Aborting Incomplete Multipart
                                Uploads Using a Bucket Lifecycle Policy (https://docs.aws.amazon.com/AmazonS3/latest/dev/mpuoverview.html#mpu-abort-incomplete-mpu-lifecycle-config)
                                in the Amazon Simple Storage Service Developer Guide.
                              properties:
                                daysAfterInitiation:
                                  description: Specifies the number of days after
                                    which an incomplete multipart upload is aborted.
                                  format: int32
                                  maximum: 2147483647
                                  minimum: 1
                                  type: integer
                              required:
                              - daysAfterInitiation
                              type: object
                            expiration:
                              description: Specifies the expiration for the lifecycle
                                of the object in the form of date, days and, whether
                                the object has a delete marker.
                              properties:
                                date:
                                  description: Indicates at what date the object is
                                    to be moved or deleted.
                                  format: date-time
                                  type: string
                                days:
                                  description: Indicates the lifetime, in days, of
                                    the objects that are subject to the rule. The
                                    value must be a non-zero positive integer.
                                  format: int32
                                  minimum: 1
                                  type: integer
                                expiredObjectDeleteMarker:
                                  description: Indicates whether a delete marker will
                                    be removed with no noncurrent versions. If set
                                    to true, the delete marker will be expired; if
                                    set to false the policy takes no action. This
                                    cannot be specified with Days or Date in a Lifecycle
                                    Expiration Policy.
                                  type: boolean
                              type: object
                            filter:
                              description: The Filter is used to identify objects
                                that a Lifecycle Rule applies to. A Filter must have
                                exactly one of Prefix, Tag, or And specified.
                              properties:
                                and:
                                  description: This is used in a Lifecycle Rule Filter
                                    to apply a logical AND to two or more predicates.
                                    The Lifecycle Rule will apply to any object matching
                                    all of the predicates configured inside the And
                                    operator.
                                  properties:
                                    objectSizeGreaterThan:
                                      description: Minimum object size to which the
                                        rule applies.
                                      format: int64
                                      type: integer
                                    objectSizeLessThan:
                                      description: Maximum object size to which the
                                        rule applies.
                                      format: int64
                                      type: integer
                                    prefix:
                                      description: Prefix identifying one or more
                                        objects to which the rule applies.
                                      type: string
                                    tags:
                                      description: All of these tags must exist in
                                        the object's tag set in order for the rule
                                        to apply.
                                      items:
                                        description: Tag is a container for a key
                                          value name pair.
                                        properties:
                                          key:
                                            description: Name of the tag. Key is a
                                              required field
                                            type: string
                                          value:
                                            description: Value of the tag. Value is
                                              a required field
                                            type: string
                                        required:
                                        - key
                                        - value
                                        type: object
                                      type: array
                                  type: object
                                objectSizeGreaterThan:
                                  description: Minimum object size to which the rule
                                    applies.
                                  format: int64
                                  type: integer
                                objectSizeLessThan:
                                  description: Maximum object size to which the rule
                                    applies.
                                  format: int64
                                  type: integer
                                prefix:
                                  description: Prefix identifying one or more objects
                                    to which the rule applies.
                                  type: string
                                tag:
                                  description: This tag must exist in the object's
                                    tag set in order for the rule to apply.
                                  properties:
                                    key:
                                      description: Name of the tag. Key is a required
                                        field
                                      type: string
                                    value:
                                      description: Value of the tag. Value is a required
                                        field
                                      type: string
                                  required:
                                  - key
                                  - value
                                  type: object
                              type: object
                            id:
                              description: Unique identifier for the rule. The value
                                cannot be longer than 255 characters.
                              type: string
                            noncurrentVersionExpiration:
                              description: Specifies when noncurrent object versions
                                expire. Upon expiration, the noncurrent object versions
                                are permanently deleted. You set this lifecycle configuration
                                action on a bucket that has versioning enabled (or
                                suspended) to request that noncurrent object versions
                                are deleted at a specific period in the object's lifetime.
                              properties:
                                newerNoncurrentVersions:
                                  description: Specifies how many noncurrent versions
                                    will be retained.
                                  format: int32
                                  type: integer
                                noncurrentDays:
                                  description: Specifies the number of days an object
                                    is noncurrent before the associated action can
                                    be performed.
                                  format: int32
                                  type: integer
                              type: object
                            noncurrentVersionTransitions:
                              description: Specifies the transition rule for the lifecycle
                                rule that describes when noncurrent objects transition
                                to a specific storage class. If your bucket is versioning-enabled
                                (or versioning is suspended), you can set this action
                                to request that noncurrent object versions are transitioned  to
                                a specific storage class at a set period in the object's
                                lifetime.
                              items:
                                description: NoncurrentVersionTransition contains
                                  the transition rule that describes when noncurrent
                                  objects transition storage class. If your bucket
                                  is versioning-enabled (or versioning is suspended),
                                  you can set this action to request that the storage
                                  class of the non-current version is transitioned
                                  at a specific period in the object's lifetime.
                                properties:
                                  newerNoncurrentVersions:
                                    description: Specifies how many noncurrent versions
                                      will be retained.
                                    format: int32
                                    type: integer
                                  noncurrentDays:
                                    description: Specifies the number of days an object
                                      is noncurrent before the associated action can
                                      be performed.
                                    format: int32
                                    type: integer
                                  storageClass:
                                    description: The class of storage used to store
                                      the object.
                                    type: string
                                required:
                                - storageClass
                                type: object
                              type: array
                            prefix:
                              description: 'Prefix identifying one or more objects
                                to which the rule applies. Deprecated: Use Filter
                                instead. This field is still supported as it is a
                                required field in PutBucketLifecycle v1.'
                              type: string
                            status:
                              description: "If 'Enabled', the rule is currently being
                                applied. If 'Disabled', the rule is not currently
                                being applied. \n Status is a required field, valid
                                values are Enabled or Disabled"
                              enum:
                              - Enabled
                              - Disabled
                              type: string
                            transitions:
                              description: Specifies when an Amazon S3 object transitions
                                to a specified storage class.
                              items:
                                description: Transition specifies when an object transitions
                                  to a specified storage class.
                                properties:
                                  date:
                                    description: Indicates when objects are transitioned
                                      to the specified storage class. The date value
                                      must be in ISO 8601 format. The time is always
                                      midnight UTC.
                                    format: date-time
                                    type: string
                                  days:
                                    description: Indicates the number of days after
                                      creation when objects are transitioned to the
                                      specified storage class. The value must be a
                                      positive integer.
                                    format: int32
                                    minimum: 1
                                    type: integer
                                  storageClass:
                                    description: The storage class to which you want
                                      the object to transition.
                                    type: string
                                required:
                                - storageClass
                                type: object
                              type: array
                          required:
                          - status
                          type: object
                        type: array
                    required:
                    - rules
                    type: object
                  locationConstraint:
                    description: Specifies the Region where the bucket will be created.
                    type: string
                  objectLockEnabledForBucket:
                    description: Specifies whether you want S3 Object Lock to be enabled
                      for the new bucket.
                    type: boolean
                  objectOwnership:
                    description: "The container element for object ownership for a
                      bucket's ownership controls. \n BucketOwnerPreferred - Objects
                      uploaded to the bucket change ownership to the bucket owner
                      if the objects are uploaded with the bucket-owner-full-control
                      canned ACL. \n ObjectWriter - The uploading account will own
                      the object if the object is uploaded with the bucket-owner-full-control
                      canned ACL. \n BucketOwnerEnforced - Access control lists (ACLs)
                      are disabled and no longer affect permissions. The bucket owner
                      automatically owns and has full control over every object in
                      the bucket. The bucket only accepts PUT requests that don't
                      specify an ACL or bucket owner full control ACLs, such as the
                      bucket-owner-full-control canned ACL or an equivalent form of
                      this ACL expressed in the XML format."
                    type: string
                type: object
              lifecycleConfigurationDisabled:
                description: LifecycleConfigurationDisabled causes provider-ceph to
                  attempt deletion and/or avoid create/updates of the lifecycle config
                  for the bucket on all of the bucket's backends. The Bucket CR's
                  status is updated accordingly.
                type: boolean
              managementPolicies:
                default:
                - '*'
                description: 'THIS IS AN ALPHA FIELD. Do not use it in production.
                  It is not honored unless the relevant Crossplane feature flag is
                  enabled, and may be changed or removed without notice. ManagementPolicies
                  specify the array of actions Crossplane is allowed to take on the
                  managed and external resources. This field is planned to replace
                  the DeletionPolicy field in a future release. Currently, both could
                  be set independently and non-default values would be honored if
                  the feature flag is enabled. If both are custom, the DeletionPolicy
                  field will be ignored. See the design doc for more information:
                  https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223
                  and this one: https://github.com/crossplane/crossplane/blob/444267e84783136daa93568b364a5f01228cacbe/design/one-pager-ignore-changes.md'
                items:
                  description: A ManagementAction represents an action that the Crossplane
                    controllers can take on an external resource.
                  enum:
                  - Observe
                  - Create
                  - Update
                  - Delete
                  - LateInitialize
                  - '*'
                  type: string
                type: array
              providerConfigRef:
                default:
                  name: default
                description: ProviderConfigReference specifies how the provider that
                  will be used to create, observe, update, and delete this managed
                  resource should be configured.
                properties:
                  name:
                    description: Name of the referenced object.
                    type: string
                  policy:
                    description: Policies for referencing.
                    properties:
                      resolution:
                        default: Required
                        description: Resolution specifies whether resolution of this
                          reference is required. The default is 'Required', which
                          means the reconcile will fail if the reference cannot be
                          resolved. 'Optional' means this reference will be a no-op
                          if it cannot be resolved.
                        enum:
                        - Required
                        - Optional
                        type: string
                      resolve:
                        description: Resolve specifies when this reference should
                          be resolved. The default is 'IfNotPresent', which will attempt
                          to resolve the reference only when the corresponding field
                          is not present. Use 'Always' to resolve the reference on
                          every reconcile.
                        enum:
                        - Always
                        - IfNotPresent
                        type: string
                    type: object
                required:
                - name
                type: object
              providerRef:
                description: 'ProviderReference specifies the provider that will be
                  used to create, observe, update, and delete this managed resource.
                  Deprecated: Please use ProviderConfigReference, i.e. `providerConfigRef`'
                properties:
                  name:
                    description: Name of the referenced object.
                    type: string
                  policy:
                    description: Policies for referencing.
                    properties:
                      resolution:
                        default: Required
                        description: Resolution specifies whether resolution of this
                          reference is required. The default is 'Required', which
                          means the reconcile will fail if the reference cannot be
                          resolved. 'Optional' means this reference will be a no-op
                          if it cannot be resolved.
                        enum:
                        - Required
                        - Optional
                        type: string
                      resolve:
                        description: Resolve specifies when this reference should
                          be resolved. The default is 'IfNotPresent', which will attempt
                          to resolve the reference only when the corresponding field
                          is not present. Use 'Always' to resolve the reference on
                          every reconcile.
                        enum:
                        - Always
                        - IfNotPresent
                        type: string
                    type: object
                required:
                - name
                type: object
              providers:
                description: Providers is a list of ProviderConfig names representing
                  S3 backends on which the bucket is to be created.
                items:
                  type: string
                type: array
              publishConnectionDetailsTo:
                description: PublishConnectionDetailsTo specifies the connection secret
                  config which contains a name, metadata and a reference to secret
                  store config to which any connection details for this managed resource
                  should be written. Connection details frequently include the endpoint,
                  username, and password required to connect to the managed resource.
                properties:
                  configRef:
                    default:
                      name: default
                    description: SecretStoreConfigRef specifies which secret store
                      config should be used for this ConnectionSecret.
                    properties:
                      name:
                        description: Name of the referenced object.
                        type: string
                      policy:
                        description: Policies for referencing.
                        properties:
                          resolution:
                            default: Required
                            description: Resolution specifies whether resolution of
                              this reference is required. The default is 'Required',
                              which means the reconcile will fail if the reference
                              cannot be resolved. 'Optional' means this reference
                              will be a no-op if it cannot be resolved.
                            enum:
                            - Required
                            - Optional
                            type: string
                          resolve:
                            description: Resolve specifies when this reference should
                              be resolved. The default is 'IfNotPresent', which will
                              attempt to resolve the reference only when the corresponding
                              field is not present. Use 'Always' to resolve the reference
                              on every reconcile.
                            enum:
                            - Always
                            - IfNotPresent
                            type: string
                        type: object
                    required:
                    - name
                    type: object
                  metadata:
                    description: Metadata is the metadata for connection secret.
                    properties:
                      annotations:
                        additionalProperties:
                          type: string
                        description: Annotations are the annotations to be added to
                          connection secret. - For Kubernetes secrets, this will be
                          used as "metadata.annotations". - It is up to Secret Store
                          implementation for others store types.
                        type: object
                      labels:
                        additionalProperties:
                          type: string
                        description: Labels are the labels/tags to be added to connection
                          secret. - For Kubernetes secrets, this will be used as "metadata.labels".
                          - It is up to Secret Store implementation for others store
                          types.
                        type: object
                      type:
                        description: Type is the SecretType for the connection secret.
                          - Only valid for Kubernetes Secret Stores.
                        type: string
                    type: object
                  name:
                    description: Name is the name of the connection secret.
                    type: string
                required:
                - name
                type: object
              writeConnectionSecretToRef:
                description: WriteConnectionSecretToReference specifies the namespace
                  and name of a Secret to which any connection details for this managed
                  resource should be written. Connection details frequently include
                  the endpoint, username, and password required to connect to the
                  managed resource. This field is planned to be replaced in a future
                  release in favor of PublishConnectionDetailsTo. Currently, both
                  could be set independently and connection details would be published
                  to both without affecting each other.
                properties:
                  name:
                    description: Name of the secret.
                    type: string
                  namespace:
                    description: Namespace of the secret.
                    type: string
                required:
                - name
                - namespace
                type: object
            required:
            - forProvider
            type: object
          status:
            description: A BucketStatus represents the observed state of a Bucket.
            properties:
              atProvider:
                description: BucketObservation are the observable fields of a Bucket.
                properties:
                  backends:
                    additionalProperties:
                      description: BackendInfo contains relevant information about
                        an S3 backend for a single bucket.
                      properties:
                        bucketCondition:
                          description: BucketCondition is the condition of the Bucket
                            on the S3 backend.
                          properties:
                            lastTransitionTime:
                              description: LastTransitionTime is the last time this
                                condition transitioned from one status to another.
                              format: date-time
                              type: string
                            message:
                              description: A Message containing details about this
                                condition's last transition from one status to another,
                                if any.
                              type: string
                            reason:
                              description: A Reason for this condition's last transition
                                from one status to another.
                              type: string
                            status:
                              description: Status of this condition; is it currently
                                True, False, or Unknown?
                              type: string
                            type:
                              description: Type of this condition. At most one of
                                each condition type may apply to a resource at any
                                point in time.
                              type: string
                          required:
                          - lastTransitionTime
                          - reason
                          - status
                          - type
                          type: object
                        lifecycleConfigurationCondition:
                          description: LifecycleConfigurationCondition is the condition
                            of the bucket lifecycle configuration on the S3 backend.
                            Use a pointer to allow nil value when there is no lifecycle
                            configuration.
                          properties:
                            lastTransitionTime:
                              description: LastTransitionTime is the last time this
                                condition transitioned from one status to another.
                              format: date-time
                              type: string
                            message:
                              description: A Message containing details about this
                                condition's last transition from one status to another,
                                if any.
                              type: string
                            reason:
                              description: A Reason for this condition's last transition
                                from one status to another.
                              type: string
                            status:
                              description: Status of this condition; is it currently
                                True, False, or Unknown?
                              type: string
                            type:
                              description: Type of this condition. At most one of
                                each condition type may apply to a resource at any
                                point in time.
                              type: string
                          required:
                          - lastTransitionTime
                          - reason
                          - status
                          - type
                          type: object
                      type: object
                    description: Backends is a map of the names of the S3 backends
                      to BackendInfo.
                    type: object
                  configurableField:
                    type: string
                  observableField:
                    type: string
                required:
                - configurableField
                type: object
              conditions:
                description: Conditions of the resource.
                items:
                  description: A Condition that may apply to a resource.
                  properties:
                    lastTransitionTime:
                      description: LastTransitionTime is the last time this condition
                        transitioned from one status to another.
                      format: date-time
                      type: string
                    message:
                      description: A Message containing details about this condition's
                        last transition from one status to another, if any.
                      type: string
                    reason:
                      description: A Reason for this condition's last transition from
                        one status to another.
                      type: string
                    status:
                      description: Status of this condition; is it currently True,
                        False, or Unknown?
                      type: string
                    type:
                      description: Type of this condition. At most one of each condition
                        type may apply to a resource at any point in time.
                      type: string
                  required:
                  - lastTransitionTime
                  - reason
                  - status
                  - type
                  type: object
                type: array
            type: object
        required:
        - spec
        type: object
    served: true
    storage: true
    subresources:
      status: {}
